;
; File generated by cc65 v 2.17 - Git eeb1b92
;
	.fopt		compiler,"cc65 v 2.17 - Git eeb1b92"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_nam_rhombus
	.import		_nam_qr_A
	.import		_nam_qr_B
	.import		_nam_Invites
	.export		_char_0
	.export		_char_1
	.export		_char_2
	.export		_char_3
	.export		_char_4
	.export		_char_5
	.export		_char_6
	.export		_char_7
	.export		_char_8
	.export		_char_9
	.export		_char_A
	.export		_char_B
	.export		_char_C
	.export		_char_D
	.export		_char_E
	.export		_char_F
	.export		_char_G
	.export		_char_H
	.export		_char_I
	.export		_char_J
	.export		_char_K
	.export		_char_L
	.export		_char_M
	.export		_char_N
	.export		_char_O
	.export		_char_P
	.export		_char_Q
	.export		_char_R
	.export		_char_S
	.export		_char_T
	.export		_char_U
	.export		_char_V
	.export		_char_W
	.export		_char_X
	.export		_char_Y
	.export		_char_Z
	.export		_char_period
	.export		_char_comma
	.export		_char_hyphen
	.export		_char_exclamation
	.export		_char_question
	.export		_char_colon
	.export		_char_quotation
	.export		_tbl_ascii
	.export		_tbl_alphabet
	.import		_set_nmi_user_call_on
	.import		_set_nmi_user_call_off
	.import		_set_nmi_user_vram_adr
	.import		_set_nmi_user_vram_lines_qty
	.import		_memfill32
	.import		_get_mus_pos
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_clear
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_music_play
	.import		_music_stop
	.import		_scroll
	.import		_split
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_vram_unrle
	.import		_memfill
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.export		_nam_InvadersA
	.export		_nam_InvadersB
	.export		_nam_scroll_squaresA
	.export		_nam_scroll_squaresB
	.export		_nam_scroll_gridA
	.export		_nam_scroll_gridB
	.export		_nam_BigText
	.export		_bigTextX
	.export		_bigTextY
	.export		_pal_i
	.export		_fr
	.export		_i
	.export		_spr
	.export		_sq_scroll_pos
	.export		_imsb
	.export		_scrollRow
	.export		_scrollPage
	.export		_from_x
	.export		_frame
	.export		_musCheckpoint
	.export		_p
	.export		_fx
	.export		_fy
	.export		_bright
	.export		_to_bright
	.export		_gfrm
	.export		_muspos
	.export		_fxFrame
	.export		_scrSwap
	.export		_frm
	.export		_xa
	.export		_ya
	.export		_za
	.export		_xya
	.export		_colorAdd
	.export		_xx
	.export		_yy
	.export		_xy
	.export		_buffAdr
	.export		_val
	.export		_palRoll
	.export		_scrollFXpos
	.export		_platforms
	.export		_buffa
	.export		_infoPage1
	.export		_infoPage2
	.export		_infoPage3
	.export		_features_attrs
	.export		_features1
	.export		_features2
	.export		_features3
	.export		_features4
	.export		_features5
	.export		_features6
	.export		_sinTbl1
	.export		_sinTbl2
	.export		_sinTbl3
	.export		_twisterSin
	.export		_twisterData
	.export		_twisterSinX
	.export		_twisterChunks
	.export		_rotorData
	.export		_string_we_like_to
	.export		_string_invite_you_to
	.export		_attr_tbl1
	.export		_attr_tbl2
	.export		_attr_tbl3
	.export		_restoreBGscrollGrid
	.export		_restoreBGscrollSquares
	.export		_pad
	.export		_pal_part1
	.export		_pal_water
	.export		_pal_scrollerFX
	.export		_pal_bigText
	.export		_pal_wewill
	.export		_bus_conflict
	.export		_logo_bottom1_BG
	.export		_logo_bottom2_BG
	.export		_logo_bottom
	.export		_pal_Invites
	.export		_pal_Platforms
	.export		_platforms_0_data
	.export		_platforms_1_data
	.export		_platforms_2_data
	.export		_platforms_3_data
	.export		_platforms_4_data
	.export		_platforms_5_data
	.export		_platforms_6_data
	.export		_platforms_7_data
	.export		_wewill_1_data
	.export		_wewill_2_data
	.export		_platforms_list
	.export		_sineTableAtoB
	.export		_sineTableTextBobbling
	.export		_cnrom_set_bank
	.export		__pal_fade_to
	.export		_part1_zx_loading_nam
	.export		_part1_zx_pilotone_nam
	.export		_pal_zx_loading
	.export		_nametable_part1_bytes
	.export		_nametable_part1_visuals
	.export		_nametable_part1_music
	.export		_setup_scene1
	.export		_zx_loading
	.export		_skip_frames
	.export		_zx_border
	.export		_scene1_ZXloading
	.export		_x
	.export		_y
	.export		_twisterAdr
	.export		_yyy
	.export		_x1
	.export		_x2
	.export		_y1
	.export		_chunk
	.export		_chunkAdr
	.export		_yfrom
	.export		_yto
	.export		_tadr
	.export		_tqty
	.export		_txtadr
	.export		_twTextTimer
	.export		_twTextAdr
	.export		_fxTwisterSetup
	.export		_twisterText
	.export		_fxTwisterFrame
	.export		_fxTwister
	.export		_fxPlasmSetup
	.export		_fxPlasmFrame
	.export		_fxPlasm
	.export		_chr_to_nametable
	.export		_fxRotorSetup
	.export		_tx
	.export		_ty
	.export		_tdx
	.export		_tdy
	.export		_stx
	.export		_sty
	.export		_rtadr
	.export		_fxRotorFrame
	.export		_showPlatforms
	.export		_fxRotor
	.export		_fxPlasm16Frame
	.export		_fxPlasm16
	.export		_plotfirehead
	.export		_fireloop
	.export		_fxFire
	.export		_setup_scene_water
	.export		_setup_scene_fire
	.export		_setupRhombusFX
	.export		_setupGridFX
	.export		_setupSquaresFX
	.export		_setupInvadersFX
	.export		_fxSetupFinalScreen
	.export		_fxPaletteRoll
	.export		_fxScroll32
	.export		_fxInvaders
	.export		_findsym
	.export		_setupBigTextPage
	.export		_fxBigPage
	.export		_main

.segment	"DATA"

_tbl_alphabet:
	.addr	_char_0
	.addr	_char_1
	.addr	_char_2
	.addr	_char_3
	.addr	_char_4
	.addr	_char_5
	.addr	_char_6
	.addr	_char_7
	.addr	_char_8
	.addr	_char_9
	.addr	_char_A
	.addr	_char_B
	.addr	_char_C
	.addr	_char_D
	.addr	_char_E
	.addr	_char_F
	.addr	_char_G
	.addr	_char_H
	.addr	_char_I
	.addr	_char_J
	.addr	_char_K
	.addr	_char_L
	.addr	_char_M
	.addr	_char_N
	.addr	_char_O
	.addr	_char_P
	.addr	_char_Q
	.addr	_char_R
	.addr	_char_S
	.addr	_char_T
	.addr	_char_U
	.addr	_char_V
	.addr	_char_W
	.addr	_char_X
	.addr	_char_Y
	.addr	_char_Z
	.addr	_char_period
	.addr	_char_comma
	.addr	_char_hyphen
	.addr	_char_exclamation
	.addr	_char_question
	.addr	_char_colon
	.addr	_char_quotation
_fire_array:
	.res	256,$00
_muspos:
	.word	$0000
_fxFrame:
	.word	$0000
_scrSwap:
	.byte	$00
_frm:
	.byte	$00
_xa:
	.byte	$00
_ya:
	.byte	$00
_za:
	.byte	$00
_xya:
	.byte	$00
_colorAdd:
	.byte	$00
_xx:
	.byte	$00
_yy:
	.byte	$00
_xy:
	.byte	$00
_buffAdr:
	.byte	$00
_val:
	.word	$0000
_palRoll:
	.byte	$00
_scrollFXpos:
	.byte	$00
_platforms:
	.byte	$00
	.byte	$32
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BE
	.byte	$50
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$32
	.byte	$A0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$C8
	.byte	$BE
	.byte	$00
	.byte	$0C
_twTextTimer:
	.word	$0000
_twTextAdr:
	.word	$0000

.segment	"RODATA"

_char_0:
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$13
_char_1:
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
_char_2:
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_char_3:
	.byte	$08
	.byte	$09
	.byte	$18
	.byte	$19
_char_4:
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$1B
_char_5:
	.byte	$0C
	.byte	$0D
	.byte	$1C
	.byte	$1D
_char_6:
	.byte	$0E
	.byte	$0F
	.byte	$1E
	.byte	$1F
_char_7:
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$31
_char_8:
	.byte	$22
	.byte	$23
	.byte	$32
	.byte	$33
_char_9:
	.byte	$24
	.byte	$25
	.byte	$34
	.byte	$35
_char_A:
	.byte	$26
	.byte	$27
	.byte	$36
	.byte	$37
_char_B:
	.byte	$28
	.byte	$29
	.byte	$38
	.byte	$39
_char_C:
	.byte	$2A
	.byte	$2B
	.byte	$3A
	.byte	$3B
_char_D:
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
_char_E:
	.byte	$2E
	.byte	$2F
	.byte	$3E
	.byte	$3F
_char_F:
	.byte	$40
	.byte	$41
	.byte	$50
	.byte	$51
_char_G:
	.byte	$42
	.byte	$43
	.byte	$52
	.byte	$53
_char_H:
	.byte	$44
	.byte	$45
	.byte	$54
	.byte	$55
_char_I:
	.byte	$46
	.byte	$47
	.byte	$56
	.byte	$57
_char_J:
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$31
_char_K:
	.byte	$4A
	.byte	$4B
	.byte	$5A
	.byte	$5B
_char_L:
	.byte	$4C
	.byte	$00
	.byte	$5C
	.byte	$5D
_char_M:
	.byte	$4E
	.byte	$4F
	.byte	$5E
	.byte	$5F
_char_N:
	.byte	$60
	.byte	$61
	.byte	$70
	.byte	$71
_char_O:
	.byte	$62
	.byte	$63
	.byte	$72
	.byte	$73
_char_P:
	.byte	$64
	.byte	$65
	.byte	$74
	.byte	$75
_char_Q:
	.byte	$66
	.byte	$67
	.byte	$76
	.byte	$77
_char_R:
	.byte	$68
	.byte	$69
	.byte	$78
	.byte	$79
_char_S:
	.byte	$6A
	.byte	$6B
	.byte	$7A
	.byte	$7B
_char_T:
	.byte	$6C
	.byte	$6D
	.byte	$7C
	.byte	$7D
_char_U:
	.byte	$6E
	.byte	$6F
	.byte	$7E
	.byte	$7F
_char_V:
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
_char_W:
	.byte	$82
	.byte	$83
	.byte	$92
	.byte	$93
_char_X:
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
_char_Y:
	.byte	$86
	.byte	$87
	.byte	$96
	.byte	$97
_char_Z:
	.byte	$88
	.byte	$89
	.byte	$98
	.byte	$99
_char_period:
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$00
_char_comma:
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
_char_hyphen:
	.byte	$8C
	.byte	$00
	.byte	$9C
	.byte	$00
_char_exclamation:
	.byte	$8D
	.byte	$00
	.byte	$9D
	.byte	$00
_char_question:
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
_char_colon:
	.byte	$C8
	.byte	$00
	.byte	$9A
	.byte	$00
_char_quotation:
	.byte	$C7
	.byte	$00
	.byte	$00
	.byte	$00
_tbl_ascii:
	.byte	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$41,$42,$43,$44,$45,$46
	.byte	$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F,$50,$51,$52,$53,$54,$55,$56
	.byte	$57,$58,$59,$5A,$2E,$2C,$2D,$21,$3F,$3A,$27,$40,$00
_nam_InvadersA:
	.byte	$80
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$80
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$07
	.byte	$80
	.byte	$02
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$28
	.byte	$26
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$6C
	.byte	$6D
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$C6
	.byte	$C7
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$20
	.byte	$21
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$3C
	.byte	$3D
	.byte	$48
	.byte	$49
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$73
	.byte	$74
	.byte	$7C
	.byte	$7D
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$A5
	.byte	$A6
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$80
	.byte	$05
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$C9
	.byte	$01
	.byte	$20
	.byte	$21
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$1E
	.byte	$1F
	.byte	$6E
	.byte	$6F
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$46
	.byte	$47
	.byte	$C8
	.byte	$A0
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$7A
	.byte	$7B
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$07
	.byte	$80
	.byte	$3F
	.byte	$00
	.byte	$80
	.byte	$3E
	.byte	$00
	.byte	$80
	.byte	$00
_nam_InvadersB:
	.byte	$80
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$80
	.byte	$05
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$02
	.byte	$03
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$80
	.byte	$02
	.byte	$20
	.byte	$21
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$26
	.byte	$27
	.byte	$6E
	.byte	$6F
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$4E
	.byte	$4F
	.byte	$C8
	.byte	$A0
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$AA
	.byte	$AB
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$07
	.byte	$19
	.byte	$C9
	.byte	$07
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$80
	.byte	$04
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$07
	.byte	$40
	.byte	$41
	.byte	$07
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$70
	.byte	$71
	.byte	$5B
	.byte	$72
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$80
	.byte	$04
	.byte	$C9
	.byte	$01
	.byte	$3E
	.byte	$3F
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$1E
	.byte	$1F
	.byte	$75
	.byte	$76
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$46
	.byte	$47
	.byte	$A7
	.byte	$A8
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$7A
	.byte	$7B
	.byte	$07
	.byte	$80
	.byte	$04
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$A0
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$0A
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$16
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$18
	.byte	$07
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$C9
	.byte	$01
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$31
	.byte	$24
	.byte	$32
	.byte	$33
	.byte	$1E
	.byte	$1F
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$62
	.byte	$6A
	.byte	$6B
	.byte	$65
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$6C
	.byte	$6D
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$BD
	.byte	$C5
	.byte	$B2
	.byte	$C0
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$C6
	.byte	$C7
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$14
	.byte	$07
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$07
	.byte	$80
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$26
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$77
	.byte	$4C
	.byte	$78
	.byte	$79
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$A9
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$A0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$7E
	.byte	$7F
	.byte	$A9
	.byte	$07
	.byte	$80
	.byte	$40
	.byte	$00
	.byte	$80
	.byte	$3E
	.byte	$00
	.byte	$80
	.byte	$00
_nam_scroll_squaresA:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$2D
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
	.byte	$01
	.byte	$00
_nam_scroll_squaresB:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$39
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$41
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$01
	.byte	$41
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$00
_nam_scroll_gridA:
	.byte	$1B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$26
	.byte	$27
	.byte	$0C
	.byte	$1D
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$24
	.byte	$15
	.byte	$14
	.byte	$25
	.byte	$19
	.byte	$11
	.byte	$10
	.byte	$1A
	.byte	$26
	.byte	$0D
	.byte	$0C
	.byte	$27
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$15
	.byte	$14
	.byte	$18
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$26
	.byte	$27
	.byte	$0C
	.byte	$1D
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$24
	.byte	$15
	.byte	$14
	.byte	$25
	.byte	$19
	.byte	$11
	.byte	$10
	.byte	$1A
	.byte	$26
	.byte	$0D
	.byte	$0C
	.byte	$27
	.byte	$28
	.byte	$0C
	.byte	$0D
	.byte	$29
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$33
	.byte	$0C
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$14
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$15
	.byte	$3D
	.byte	$14
	.byte	$3E
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$15
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$56
	.byte	$5B
	.byte	$42
	.byte	$5C
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$64
	.byte	$15
	.byte	$3D
	.byte	$65
	.byte	$66
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$67
	.byte	$0D
	.byte	$42
	.byte	$0C
	.byte	$68
	.byte	$0C
	.byte	$34
	.byte	$69
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$33
	.byte	$0C
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$14
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$15
	.byte	$3D
	.byte	$14
	.byte	$3E
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$15
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$56
	.byte	$5B
	.byte	$42
	.byte	$5C
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$64
	.byte	$15
	.byte	$3D
	.byte	$65
	.byte	$66
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$67
	.byte	$0D
	.byte	$42
	.byte	$0C
	.byte	$68
	.byte	$0C
	.byte	$34
	.byte	$69
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$6A
	.byte	$14
	.byte	$3A
	.byte	$6B
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$33
	.byte	$0C
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$14
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$15
	.byte	$3D
	.byte	$14
	.byte	$3E
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$64
	.byte	$15
	.byte	$3D
	.byte	$65
	.byte	$66
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$67
	.byte	$0D
	.byte	$42
	.byte	$0C
	.byte	$68
	.byte	$0C
	.byte	$34
	.byte	$69
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$6A
	.byte	$14
	.byte	$3A
	.byte	$6B
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$33
	.byte	$0C
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$14
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$15
	.byte	$3D
	.byte	$14
	.byte	$3E
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$3C
	.byte	$3D
	.byte	$52
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$0D
	.byte	$64
	.byte	$15
	.byte	$3D
	.byte	$65
	.byte	$66
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$67
	.byte	$0D
	.byte	$42
	.byte	$0C
	.byte	$68
	.byte	$0C
	.byte	$34
	.byte	$69
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$6A
	.byte	$14
	.byte	$3A
	.byte	$6B
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$14
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$15
	.byte	$3D
	.byte	$14
	.byte	$3E
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$3C
	.byte	$3D
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$1B
	.byte	$02
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$0D
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$66
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$67
	.byte	$0D
	.byte	$42
	.byte	$0C
	.byte	$68
	.byte	$0C
	.byte	$34
	.byte	$69
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$6A
	.byte	$14
	.byte	$3A
	.byte	$6B
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$1B
	.byte	$7F
	.byte	$00
	.byte	$1B
	.byte	$00
_nam_scroll_gridB:
	.byte	$33
	.byte	$17
	.byte	$15
	.byte	$14
	.byte	$18
	.byte	$19
	.byte	$11
	.byte	$10
	.byte	$1A
	.byte	$1B
	.byte	$0D
	.byte	$0C
	.byte	$1C
	.byte	$1D
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$15
	.byte	$17
	.byte	$18
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$1B
	.byte	$1C
	.byte	$0C
	.byte	$09
	.byte	$1D
	.byte	$22
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0C
	.byte	$28
	.byte	$29
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$2A
	.byte	$2B
	.byte	$15
	.byte	$20
	.byte	$1F
	.byte	$2C
	.byte	$20
	.byte	$28
	.byte	$0C
	.byte	$0D
	.byte	$29
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$2A
	.byte	$14
	.byte	$15
	.byte	$2B
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$19
	.byte	$11
	.byte	$10
	.byte	$1A
	.byte	$1B
	.byte	$0D
	.byte	$0C
	.byte	$1C
	.byte	$1D
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$15
	.byte	$17
	.byte	$18
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$1B
	.byte	$1C
	.byte	$0C
	.byte	$09
	.byte	$1D
	.byte	$22
	.byte	$09
	.byte	$09
	.byte	$2E
	.byte	$09
	.byte	$2F
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0C
	.byte	$28
	.byte	$29
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$2A
	.byte	$2B
	.byte	$15
	.byte	$20
	.byte	$1F
	.byte	$2C
	.byte	$20
	.byte	$20
	.byte	$30
	.byte	$2C
	.byte	$31
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$2A
	.byte	$14
	.byte	$15
	.byte	$2B
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$41
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$3C
	.byte	$3D
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0C
	.byte	$59
	.byte	$1E
	.byte	$5A
	.byte	$09
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$0D
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$49
	.byte	$61
	.byte	$62
	.byte	$15
	.byte	$4C
	.byte	$20
	.byte	$63
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$6A
	.byte	$14
	.byte	$3A
	.byte	$6B
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$3C
	.byte	$3D
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0C
	.byte	$59
	.byte	$1E
	.byte	$5A
	.byte	$09
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$0D
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$49
	.byte	$61
	.byte	$62
	.byte	$15
	.byte	$4C
	.byte	$20
	.byte	$63
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$3C
	.byte	$3D
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0C
	.byte	$59
	.byte	$1E
	.byte	$5A
	.byte	$09
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$0D
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$49
	.byte	$61
	.byte	$62
	.byte	$15
	.byte	$4C
	.byte	$20
	.byte	$63
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$26
	.byte	$27
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0C
	.byte	$59
	.byte	$1E
	.byte	$5A
	.byte	$09
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$49
	.byte	$61
	.byte	$62
	.byte	$15
	.byte	$4C
	.byte	$20
	.byte	$63
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$26
	.byte	$27
	.byte	$0C
	.byte	$1D
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0C
	.byte	$59
	.byte	$1E
	.byte	$5A
	.byte	$09
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$49
	.byte	$61
	.byte	$62
	.byte	$15
	.byte	$4C
	.byte	$20
	.byte	$63
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$26
	.byte	$27
	.byte	$0C
	.byte	$1D
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$24
	.byte	$15
	.byte	$14
	.byte	$25
	.byte	$00
	.byte	$33
	.byte	$7E
	.byte	$00
	.byte	$33
	.byte	$00
_nam_BigText:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$9E
	.byte	$9F
	.byte	$A2
	.byte	$C3
	.byte	$00
	.byte	$C0
	.byte	$01
	.byte	$10
	.byte	$C0
	.byte	$C4
	.byte	$BE
	.byte	$C2
	.byte	$00
	.byte	$C5
	.byte	$8E
	.byte	$C6
	.byte	$8E
	.byte	$30
	.byte	$4D
	.byte	$C2
	.byte	$48
	.byte	$8B
	.byte	$8B
	.byte	$8A
	.byte	$8E
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$85
	.byte	$53
	.byte	$50
	.byte	$02
	.byte	$05
	.byte	$5C
	.byte	$55
	.byte	$02
	.byte	$2F
	.byte	$05
	.byte	$02
	.byte	$06
	.byte	$05
	.byte	$02
	.byte	$00
_infoPage1:
	.byte	$43,$41,$46,$45,$50,$41,$52,$54,$59,$20,$32,$30,$31,$39,$2E,$20
	.byte	$54,$52,$55,$45,$20,$44,$45,$4D,$4F,$53,$43,$45,$4E,$45,$20,$20
	.byte	$57,$45,$45,$4B,$45,$4E,$44,$20,$49,$4E,$20,$20,$20,$20,$20,$20
	.byte	$4B,$41,$5A,$41,$4E,$2C,$20,$52,$55,$53,$53,$49,$41,$2E,$20,$20
	.byte	$4D,$55,$4C,$54,$49,$50,$4C,$41,$54,$46,$4F,$52,$4D,$20,$20,$20
	.byte	$44,$45,$4D,$4F,$50,$41,$52,$54,$59,$20,$41,$54,$20,$20,$20,$20
	.byte	$32,$35,$2D,$32,$37,$20,$4F,$43,$54,$4F,$42,$45,$52,$20,$20,$20
	.byte	$4E,$45,$57,$53,$4B,$4F,$4F,$4C,$20,$41,$4E,$44,$20,$20,$20,$20
	.byte	$4F,$4C,$44,$53,$4B,$4F,$4F,$4C,$20,$50,$52,$4F,$44,$53,$2E,$20
_infoPage2:
	.byte	$55,$50,$20,$54,$4F,$20,$34,$30,$30,$20,$50,$50,$4C,$21,$20,$20
	.byte	$42,$42,$51,$20,$5A,$4F,$4E,$45,$2C,$20,$48,$4F,$4D,$45,$20,$20
	.byte	$46,$4F,$4F,$44,$20,$41,$4E,$44,$20,$44,$52,$49,$4E,$4B,$53,$2C
	.byte	$56,$49,$50,$20,$4C,$4F,$55,$4E,$47,$45,$20,$46,$4F,$52,$20,$20
	.byte	$53,$43,$45,$4E,$45,$52,$53,$20,$57,$49,$54,$48,$20,$20,$20,$20
	.byte	$50,$52,$4F,$44,$53,$2C,$20,$52,$45,$54,$52,$4F,$2D,$20,$20,$20
	.byte	$4D,$55,$53,$45,$55,$4D,$2C,$20,$43,$41,$4C,$4D,$20,$20,$20,$20
	.byte	$46,$4F,$52,$45,$53,$54,$20,$4F,$55,$54,$44,$4F,$4F,$52,$2C,$20
	.byte	$43,$48,$45,$41,$50,$20,$48,$4F,$54,$45,$4C,$2E,$20,$20,$20,$20
_infoPage3:
	.byte	$57,$41,$52,$4D,$2C,$20,$46,$52,$49,$45,$4E,$44,$4C,$59,$20,$20
	.byte	$41,$4E,$44,$20,$57,$45,$4C,$43,$4F,$4D,$49,$4E,$47,$20,$20,$20
	.byte	$41,$54,$48,$4D,$4F,$53,$50,$48,$45,$52,$45,$2C,$20,$20,$20,$20
	.byte	$47,$52,$45,$41,$54,$20,$50,$52,$49,$5A,$45,$53,$2C,$20,$20,$20
	.byte	$53,$50,$45,$43,$49,$41,$4C,$20,$47,$55,$45,$53,$54,$53,$3A,$20
	.byte	$53,$43,$45,$4E,$45,$20,$53,$54,$41,$52,$53,$2E,$20,$20,$20,$20
	.byte	$4E,$4F,$4E,$2D,$53,$54,$4F,$50,$20,$50,$41,$52,$54,$59,$21,$20
	.byte	$52,$45,$4D,$4F,$54,$45,$20,$45,$4E,$54,$52,$49,$45,$53,$20,$20
	.byte	$41,$52,$45,$20,$41,$4C,$4C,$4F,$57,$45,$44,$21,$20,$20,$20,$20
_features_attrs:
	.byte	$04
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
_features1:
	.byte	$A5
	.byte	$A6
	.byte	$28
	.byte	$29
	.byte	$46
	.byte	$47
	.byte	$42
	.byte	$43
	.byte	$A4
	.byte	$A5
	.byte	$6A
	.byte	$6B
	.byte	$2A
	.byte	$2B
	.byte	$68
	.byte	$69
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$60
	.byte	$61
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$00
	.byte	$A6
	.byte	$A4
	.byte	$38
	.byte	$39
	.byte	$56
	.byte	$57
	.byte	$52
	.byte	$53
	.byte	$A5
	.byte	$A6
	.byte	$7A
	.byte	$7B
	.byte	$3A
	.byte	$3B
	.byte	$78
	.byte	$79
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$70
	.byte	$71
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$00
_features2:
	.byte	$A6
	.byte	$A4
	.byte	$4E
	.byte	$4F
	.byte	$26
	.byte	$27
	.byte	$6A
	.byte	$6B
	.byte	$6A
	.byte	$6B
	.byte	$46
	.byte	$47
	.byte	$80
	.byte	$81
	.byte	$2E
	.byte	$2F
	.byte	$A9
	.byte	$AA
	.byte	$26
	.byte	$27
	.byte	$6E
	.byte	$6F
	.byte	$2C
	.byte	$2D
	.byte	$46
	.byte	$47
	.byte	$62
	.byte	$63
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$00
	.byte	$A4
	.byte	$A5
	.byte	$5E
	.byte	$5F
	.byte	$36
	.byte	$37
	.byte	$7A
	.byte	$7B
	.byte	$7A
	.byte	$7B
	.byte	$56
	.byte	$57
	.byte	$90
	.byte	$91
	.byte	$3E
	.byte	$3F
	.byte	$A8
	.byte	$A9
	.byte	$36
	.byte	$37
	.byte	$7E
	.byte	$7F
	.byte	$3C
	.byte	$3D
	.byte	$56
	.byte	$57
	.byte	$72
	.byte	$73
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$00
_features3:
	.byte	$A4
	.byte	$A5
	.byte	$6A
	.byte	$6B
	.byte	$2E
	.byte	$2F
	.byte	$4E
	.byte	$4F
	.byte	$46
	.byte	$47
	.byte	$60
	.byte	$61
	.byte	$26
	.byte	$27
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$00
	.byte	$A5
	.byte	$A6
	.byte	$7A
	.byte	$7B
	.byte	$3E
	.byte	$3F
	.byte	$5E
	.byte	$5F
	.byte	$56
	.byte	$57
	.byte	$70
	.byte	$71
	.byte	$36
	.byte	$37
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$A8
	.byte	$A9
	.byte	$00
_features4:
	.byte	$B9
	.byte	$B8
	.byte	$2C
	.byte	$2D
	.byte	$00
	.byte	$49
	.byte	$B9
	.byte	$B8
	.byte	$6A
	.byte	$6B
	.byte	$2E
	.byte	$2F
	.byte	$6C
	.byte	$6D
	.byte	$6A
	.byte	$6B
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$00
	.byte	$B7
	.byte	$B9
	.byte	$3C
	.byte	$3D
	.byte	$58
	.byte	$59
	.byte	$B7
	.byte	$B9
	.byte	$7A
	.byte	$7B
	.byte	$3E
	.byte	$3F
	.byte	$7C
	.byte	$7D
	.byte	$7A
	.byte	$7B
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$00
_features5:
	.byte	$B7
	.byte	$B9
	.byte	$62
	.byte	$63
	.byte	$6E
	.byte	$6F
	.byte	$6C
	.byte	$6D
	.byte	$2C
	.byte	$2D
	.byte	$62
	.byte	$63
	.byte	$62
	.byte	$63
	.byte	$68
	.byte	$69
	.byte	$B5
	.byte	$B4
	.byte	$26
	.byte	$27
	.byte	$68
	.byte	$69
	.byte	$2E
	.byte	$2F
	.byte	$26
	.byte	$27
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$00
	.byte	$B8
	.byte	$B7
	.byte	$72
	.byte	$73
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7D
	.byte	$3C
	.byte	$3D
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$78
	.byte	$79
	.byte	$B4
	.byte	$B6
	.byte	$36
	.byte	$37
	.byte	$78
	.byte	$79
	.byte	$3E
	.byte	$3F
	.byte	$36
	.byte	$37
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$00
_features6:
	.byte	$B8
	.byte	$B7
	.byte	$04
	.byte	$05
	.byte	$B7
	.byte	$B9
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$2E
	.byte	$2F
	.byte	$64
	.byte	$65
	.byte	$B9
	.byte	$A7
	.byte	$44
	.byte	$45
	.byte	$62
	.byte	$63
	.byte	$6C
	.byte	$6D
	.byte	$2E
	.byte	$2F
	.byte	$4C
	.byte	$00
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$00
	.byte	$B9
	.byte	$B8
	.byte	$14
	.byte	$15
	.byte	$B8
	.byte	$B7
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$3E
	.byte	$3F
	.byte	$74
	.byte	$75
	.byte	$B7
	.byte	$AC
	.byte	$54
	.byte	$55
	.byte	$72
	.byte	$73
	.byte	$7C
	.byte	$7D
	.byte	$3E
	.byte	$3F
	.byte	$5C
	.byte	$5D
	.byte	$B5
	.byte	$B4
	.byte	$B6
	.byte	$B5
	.byte	$B4
	.byte	$00
_sinTbl1:
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
_sinTbl2:
	.byte	$0C
	.byte	$0F
	.byte	$12
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$14
	.byte	$11
	.byte	$0E
	.byte	$0B
	.byte	$09
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$0A
	.byte	$0D
	.byte	$10
	.byte	$13
	.byte	$15
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$15
	.byte	$13
	.byte	$10
	.byte	$0D
	.byte	$0A
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$09
	.byte	$0B
	.byte	$0E
	.byte	$11
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$14
	.byte	$12
	.byte	$0F
	.byte	$0C
	.byte	$09
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$0A
	.byte	$0D
	.byte	$0F
	.byte	$12
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$15
	.byte	$13
	.byte	$11
	.byte	$0E
	.byte	$0B
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$0B
	.byte	$0E
	.byte	$11
	.byte	$13
	.byte	$15
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$14
	.byte	$12
	.byte	$0F
	.byte	$0D
	.byte	$0A
	.byte	$07
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$0F
	.byte	$12
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$14
	.byte	$11
	.byte	$0E
	.byte	$0B
	.byte	$09
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$0A
	.byte	$0D
	.byte	$10
	.byte	$13
	.byte	$15
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$15
	.byte	$13
	.byte	$10
	.byte	$0D
	.byte	$0A
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$09
	.byte	$0B
	.byte	$0E
	.byte	$11
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$14
	.byte	$12
	.byte	$0F
	.byte	$0C
	.byte	$09
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$07
	.byte	$0A
	.byte	$0D
	.byte	$0F
	.byte	$12
	.byte	$14
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$15
	.byte	$13
	.byte	$11
	.byte	$0E
	.byte	$0B
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$0B
	.byte	$0E
	.byte	$11
	.byte	$13
	.byte	$15
	.byte	$17
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$16
	.byte	$14
	.byte	$12
	.byte	$0F
	.byte	$0D
	.byte	$0A
	.byte	$07
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$09
_sinTbl3:
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$06
_twisterSin:
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3E
	.byte	$3E
	.byte	$3E
	.byte	$3E
	.byte	$3D
	.byte	$3D
	.byte	$3D
	.byte	$3C
	.byte	$3C
	.byte	$3B
	.byte	$3B
	.byte	$3B
	.byte	$3A
	.byte	$3A
	.byte	$39
	.byte	$39
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$36
	.byte	$35
	.byte	$35
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$32
	.byte	$32
	.byte	$31
	.byte	$30
	.byte	$30
	.byte	$2F
	.byte	$2E
	.byte	$2E
	.byte	$2D
	.byte	$2C
	.byte	$2C
	.byte	$2B
	.byte	$2A
	.byte	$29
	.byte	$29
	.byte	$28
	.byte	$27
	.byte	$26
	.byte	$25
	.byte	$25
	.byte	$24
	.byte	$23
	.byte	$22
	.byte	$22
	.byte	$21
	.byte	$20
	.byte	$1F
	.byte	$1E
	.byte	$1E
	.byte	$1D
	.byte	$1C
	.byte	$1B
	.byte	$1B
	.byte	$1A
	.byte	$19
	.byte	$18
	.byte	$17
	.byte	$17
	.byte	$16
	.byte	$15
	.byte	$14
	.byte	$14
	.byte	$13
	.byte	$12
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0E
	.byte	$0E
	.byte	$0D
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$0B
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$35
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$39
	.byte	$39
	.byte	$3A
	.byte	$3A
	.byte	$3B
	.byte	$3B
	.byte	$3B
	.byte	$3C
	.byte	$3C
	.byte	$3D
	.byte	$3D
	.byte	$3D
	.byte	$3E
	.byte	$3E
	.byte	$3E
	.byte	$3E
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
_twisterData:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0F
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$0E
	.byte	$0D
	.byte	$0D
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$0D
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$0B
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$0B
	.byte	$0B
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_twisterSinX:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
_twisterChunks:
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_rotorData:
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8B
	.byte	$8B
	.byte	$8B
	.byte	$8B
_string_we_like_to:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$6B
	.byte	$D7
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$DC
	.byte	$BB
	.byte	$BC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_string_invite_you_to:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
_attr_tbl1:
	.word	$23D2
	.word	$23D3
	.word	$23D4
	.word	$23D5
	.word	$23D6
	.word	$23D7
	.word	$27D0
	.word	$27D1
	.word	$27D2
	.word	$27D3
	.word	$27D4
	.word	$27D5
	.word	$27D6
	.word	$27D7
	.word	$23D0
	.word	$23D1
_attr_tbl2:
	.word	$23D3
	.word	$23D4
	.word	$23D5
	.word	$23D6
	.word	$23D7
	.word	$27D0
	.word	$27D1
	.word	$27D2
	.word	$27D3
	.word	$27D4
	.word	$27D5
	.word	$27D6
	.word	$27D7
	.word	$23D0
	.word	$23D1
	.word	$23D2
_attr_tbl3:
	.word	$23D4
	.word	$23D5
	.word	$23D6
	.word	$23D7
	.word	$27D0
	.word	$27D1
	.word	$27D2
	.word	$27D3
	.word	$27D4
	.word	$27D5
	.word	$27D6
	.word	$27D7
	.word	$23D0
	.word	$23D1
	.word	$23D2
	.word	$23D3
_restoreBGscrollGrid:
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$33
	.byte	$0C
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$14
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$15
	.byte	$3D
	.byte	$14
	.byte	$3E
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$0D
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$3C
	.byte	$3D
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$10
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0C
	.byte	$59
	.byte	$1E
	.byte	$5A
	.byte	$09
	.byte	$09
	.byte	$1E
	.byte	$0A
	.byte	$09
	.byte	$0C
	.byte	$0B
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0F
	.byte	$12
	.byte	$11
	.byte	$14
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$44
	.byte	$09
	.byte	$45
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$0D
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$11
	.byte	$49
	.byte	$61
	.byte	$62
	.byte	$15
	.byte	$4C
	.byte	$20
	.byte	$63
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$20
	.byte	$15
	.byte	$24
	.byte	$25
	.byte	$14
	.byte	$11
	.byte	$19
	.byte	$1A
	.byte	$10
	.byte	$0D
	.byte	$26
	.byte	$27
	.byte	$0C
	.byte	$01
	.byte	$00
	.byte	$4F
	.byte	$50
	.byte	$64
	.byte	$15
	.byte	$3D
	.byte	$65
	.byte	$66
	.byte	$11
	.byte	$3F
	.byte	$40
	.byte	$67
	.byte	$0D
	.byte	$42
	.byte	$0C
	.byte	$68
	.byte	$0C
	.byte	$34
	.byte	$69
	.byte	$36
	.byte	$10
	.byte	$37
	.byte	$38
	.byte	$6A
	.byte	$14
	.byte	$3A
	.byte	$6B
	.byte	$4C
	.byte	$2C
	.byte	$4D
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
_restoreBGscrollSquares:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$00
_pal_part1:
	.byte	$0F
	.byte	$05
	.byte	$2C
	.byte	$10
	.byte	$0F
	.byte	$30
	.byte	$10
	.byte	$06
	.byte	$0F
	.byte	$0F
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_pal_water:
	.byte	$0F
	.byte	$0C
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$0B
	.byte	$1B
	.byte	$2B
	.byte	$0F
	.byte	$2D
	.byte	$20
	.byte	$10
	.byte	$0F
	.byte	$3D
	.byte	$3D
	.byte	$0F
_pal_scrollerFX:
	.byte	$0F
	.byte	$0F
	.byte	$03
	.byte	$02
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$11
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$0B
	.byte	$1B
	.byte	$2B
_pal_bigText:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$0F
	.byte	$0F
	.byte	$01
	.byte	$1C
	.byte	$2C
	.byte	$0F
	.byte	$05
	.byte	$15
	.byte	$25
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_pal_wewill:
	.byte	$0F
	.byte	$01
	.byte	$03
	.byte	$10
	.byte	$0F
	.byte	$30
	.byte	$05
	.byte	$10
	.byte	$0F
	.byte	$06
	.byte	$08
	.byte	$27
	.byte	$0F
	.byte	$27
	.byte	$0C
	.byte	$02
_bus_conflict:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
_logo_bottom1_BG:
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
_logo_bottom2_BG:
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
_logo_bottom:
	.byte	$00
	.byte	$00
	.byte	$B8
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B9
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$BA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$BB
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$BC
	.byte	$01
	.byte	$28
	.byte	$00
	.byte	$BD
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$BE
	.byte	$01
	.byte	$38
	.byte	$00
	.byte	$BF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$C8
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C9
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CA
	.byte	$01
	.byte	$18
	.byte	$08
	.byte	$CB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$28
	.byte	$08
	.byte	$CD
	.byte	$01
	.byte	$30
	.byte	$08
	.byte	$CE
	.byte	$01
	.byte	$38
	.byte	$08
	.byte	$CF
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$D8
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$D9
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$DA
	.byte	$01
	.byte	$18
	.byte	$10
	.byte	$DB
	.byte	$01
	.byte	$20
	.byte	$10
	.byte	$DC
	.byte	$01
	.byte	$28
	.byte	$10
	.byte	$DD
	.byte	$01
	.byte	$30
	.byte	$10
	.byte	$DE
	.byte	$01
	.byte	$38
	.byte	$10
	.byte	$DF
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$E8
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$E9
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$18
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$18
	.byte	$EC
	.byte	$01
	.byte	$28
	.byte	$18
	.byte	$ED
	.byte	$01
	.byte	$30
	.byte	$18
	.byte	$EE
	.byte	$01
	.byte	$38
	.byte	$18
	.byte	$EF
	.byte	$01
	.byte	$00
	.byte	$20
	.byte	$F0
	.byte	$01
	.byte	$08
	.byte	$20
	.byte	$F1
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$F2
	.byte	$01
	.byte	$18
	.byte	$20
	.byte	$F3
	.byte	$01
	.byte	$20
	.byte	$20
	.byte	$F4
	.byte	$01
	.byte	$28
	.byte	$20
	.byte	$F5
	.byte	$01
	.byte	$30
	.byte	$20
	.byte	$F6
	.byte	$01
	.byte	$38
	.byte	$20
	.byte	$F7
	.byte	$01
	.byte	$00
	.byte	$28
	.byte	$F8
	.byte	$01
	.byte	$08
	.byte	$28
	.byte	$F9
	.byte	$01
	.byte	$10
	.byte	$28
	.byte	$FA
	.byte	$01
	.byte	$18
	.byte	$28
	.byte	$FB
	.byte	$01
	.byte	$20
	.byte	$28
	.byte	$FC
	.byte	$01
	.byte	$28
	.byte	$28
	.byte	$FD
	.byte	$01
	.byte	$30
	.byte	$28
	.byte	$FE
	.byte	$01
	.byte	$38
	.byte	$28
	.byte	$FF
	.byte	$01
	.byte	$80
_pal_Invites:
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$1A
	.byte	$27
	.byte	$24
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_pal_Platforms:
	.byte	$0F
	.byte	$1B
	.byte	$2B
	.byte	$3B
	.byte	$0F
	.byte	$16
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$14
	.byte	$24
	.byte	$34
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
_platforms_0_data:
	.byte	$E0
	.byte	$00
	.byte	$EC
	.byte	$00
	.byte	$E8
	.byte	$00
	.byte	$E9
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$DE
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$ED
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EE
	.byte	$02
	.byte	$18
	.byte	$00
	.byte	$E6
	.byte	$03
	.byte	$80
_platforms_1_data:
	.byte	$E4
	.byte	$00
	.byte	$DF
	.byte	$00
	.byte	$EC
	.byte	$00
	.byte	$DA
	.byte	$01
	.byte	$F4
	.byte	$00
	.byte	$E6
	.byte	$02
	.byte	$FC
	.byte	$00
	.byte	$E2
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$DC
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$E8
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$E6
	.byte	$02
	.byte	$80
_platforms_2_data:
	.byte	$F4
	.byte	$00
	.byte	$DC
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$D6
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$D4
	.byte	$02
	.byte	$80
_platforms_3_data:
	.byte	$E0
	.byte	$00
	.byte	$E9
	.byte	$01
	.byte	$E8
	.byte	$00
	.byte	$DC
	.byte	$02
	.byte	$F0
	.byte	$00
	.byte	$FE
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$E9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$DC
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$E8
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$D8
	.byte	$00
	.byte	$80
_platforms_4_data:
	.byte	$ED
	.byte	$00
	.byte	$DA
	.byte	$03
	.byte	$F5
	.byte	$00
	.byte	$E6
	.byte	$00
	.byte	$FD
	.byte	$00
	.byte	$E2
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$E0
	.byte	$02
	.byte	$0D
	.byte	$00
	.byte	$DA
	.byte	$03
	.byte	$80
_platforms_5_data:
	.byte	$ED
	.byte	$00
	.byte	$DA
	.byte	$00
	.byte	$F5
	.byte	$00
	.byte	$ED
	.byte	$01
	.byte	$FD
	.byte	$00
	.byte	$DA
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$EB
	.byte	$03
	.byte	$0D
	.byte	$00
	.byte	$E2
	.byte	$00
	.byte	$80
_platforms_6_data:
	.byte	$E4
	.byte	$00
	.byte	$DB
	.byte	$00
	.byte	$EC
	.byte	$00
	.byte	$E4
	.byte	$01
	.byte	$F4
	.byte	$00
	.byte	$D0
	.byte	$02
	.byte	$FC
	.byte	$00
	.byte	$D0
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$D1
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$D1
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$E6
	.byte	$02
	.byte	$80
_platforms_7_data:
	.byte	$E0
	.byte	$00
	.byte	$DA
	.byte	$00
	.byte	$E8
	.byte	$00
	.byte	$E7
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$DD
	.byte	$02
	.byte	$FC
	.byte	$00
	.byte	$E8
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$ED
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$E1
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$DE
	.byte	$02
	.byte	$1C
	.byte	$00
	.byte	$EB
	.byte	$03
	.byte	$80
_wewill_1_data:
	.byte	$E4
	.byte	$FC
	.byte	$F0
	.byte	$00
	.byte	$EC
	.byte	$FC
	.byte	$DE
	.byte	$01
	.byte	$FC
	.byte	$FC
	.byte	$F0
	.byte	$02
	.byte	$04
	.byte	$FC
	.byte	$E2
	.byte	$03
	.byte	$0C
	.byte	$FC
	.byte	$E5
	.byte	$00
	.byte	$14
	.byte	$FC
	.byte	$E5
	.byte	$01
	.byte	$80
_wewill_2_data:
	.byte	$D8
	.byte	$FC
	.byte	$F0
	.byte	$01
	.byte	$E0
	.byte	$FC
	.byte	$DA
	.byte	$02
	.byte	$E8
	.byte	$FC
	.byte	$E2
	.byte	$03
	.byte	$F0
	.byte	$FC
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$D4
	.byte	$01
	.byte	$10
	.byte	$FC
	.byte	$F2
	.byte	$02
	.byte	$18
	.byte	$FC
	.byte	$E8
	.byte	$03
	.byte	$20
	.byte	$FC
	.byte	$EE
	.byte	$01
	.byte	$80
_platforms_list:
	.addr	_platforms_0_data
	.addr	_platforms_1_data
	.addr	_platforms_2_data
	.addr	_platforms_3_data
	.addr	_platforms_4_data
	.addr	_platforms_5_data
	.addr	_platforms_6_data
	.addr	_platforms_7_data
	.addr	_wewill_1_data
	.addr	_wewill_2_data
_sineTableAtoB:
	.word	$0000
	.word	$0000
	.word	$0001
	.word	$0002
	.word	$0004
	.word	$0007
	.word	$000A
	.word	$000D
	.word	$0011
	.word	$0016
	.word	$001B
	.word	$0021
	.word	$0027
	.word	$002D
	.word	$0034
	.word	$003B
	.word	$0042
	.word	$004A
	.word	$0051
	.word	$005A
	.word	$0062
	.word	$006A
	.word	$0073
	.word	$007B
	.word	$0084
	.word	$008C
	.word	$0095
	.word	$009D
	.word	$00A5
	.word	$00AE
	.word	$00B5
	.word	$00BD
	.word	$00C4
	.word	$00CB
	.word	$00D2
	.word	$00D8
	.word	$00DE
	.word	$00E4
	.word	$00E9
	.word	$00EE
	.word	$00F2
	.word	$00F5
	.word	$00F8
	.word	$00FB
	.word	$00FD
	.word	$00FE
	.word	$00FF
	.word	$00FF
_sineTableTextBobbling:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0001
	.word	$0002
	.word	$0002
	.word	$0003
	.word	$0004
	.word	$0005
	.word	$0006
	.word	$0006
	.word	$0007
	.word	$0007
	.word	$0007
	.word	$0008
	.word	$0007
	.word	$0007
	.word	$0007
	.word	$0006
	.word	$0006
	.word	$0005
	.word	$0004
	.word	$0003
	.word	$0002
	.word	$0002
	.word	$0001
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_part1_zx_loading_nam:
	.byte	$46
	.byte	$41
	.byte	$46
	.byte	$1F
	.byte	$42
	.byte	$46
	.byte	$1F
	.byte	$3C
	.byte	$46
	.byte	$1F
	.byte	$3A
	.byte	$46
	.byte	$1F
	.byte	$3B
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$3B
	.byte	$46
	.byte	$03
	.byte	$40
	.byte	$46
	.byte	$03
	.byte	$69
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$07
	.byte	$46
	.byte	$05
	.byte	$40
	.byte	$46
	.byte	$03
	.byte	$2B
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$2B
	.byte	$46
	.byte	$03
	.byte	$3E
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$3E
	.byte	$46
	.byte	$03
	.byte	$2C
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$2C
	.byte	$46
	.byte	$03
	.byte	$2D
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$2D
	.byte	$46
	.byte	$03
	.byte	$2E
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$2E
	.byte	$46
	.byte	$03
	.byte	$2F
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$2F
	.byte	$46
	.byte	$03
	.byte	$3E
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$3E
	.byte	$46
	.byte	$03
	.byte	$30
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$30
	.byte	$46
	.byte	$03
	.byte	$31
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$31
	.byte	$46
	.byte	$03
	.byte	$32
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$32
	.byte	$46
	.byte	$03
	.byte	$33
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$33
	.byte	$46
	.byte	$03
	.byte	$34
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$34
	.byte	$46
	.byte	$03
	.byte	$35
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$35
	.byte	$46
	.byte	$03
	.byte	$36
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$36
	.byte	$46
	.byte	$03
	.byte	$37
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$37
	.byte	$46
	.byte	$03
	.byte	$38
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$38
	.byte	$46
	.byte	$03
	.byte	$39
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$11
	.byte	$12
	.byte	$46
	.byte	$12
	.byte	$13
	.byte	$07
	.byte	$39
	.byte	$46
	.byte	$03
	.byte	$3D
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$19
	.byte	$18
	.byte	$07
	.byte	$3D
	.byte	$46
	.byte	$03
	.byte	$3F
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$14
	.byte	$15
	.byte	$46
	.byte	$12
	.byte	$16
	.byte	$07
	.byte	$3F
	.byte	$46
	.byte	$03
	.byte	$30
	.byte	$46
	.byte	$03
	.byte	$07
	.byte	$46
	.byte	$17
	.byte	$30
	.byte	$46
	.byte	$03
	.byte	$43
	.byte	$46
	.byte	$1F
	.byte	$44
	.byte	$46
	.byte	$1F
	.byte	$30
	.byte	$46
	.byte	$1F
	.byte	$45
	.byte	$46
	.byte	$1F
	.byte	$00
	.byte	$46
	.byte	$08
	.byte	$AA
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$46
	.byte	$07
	.byte	$00
	.byte	$46
	.byte	$00
_part1_zx_pilotone_nam:
	.byte	$2B
	.byte	$07
	.byte	$2B
	.byte	$1F
	.byte	$50
	.byte	$2B
	.byte	$1F
	.byte	$4F
	.byte	$2B
	.byte	$1F
	.byte	$46
	.byte	$2B
	.byte	$1F
	.byte	$07
	.byte	$2B
	.byte	$1F
	.byte	$4E
	.byte	$2B
	.byte	$03
	.byte	$69
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$07
	.byte	$2B
	.byte	$05
	.byte	$4E
	.byte	$2B
	.byte	$03
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$52
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$52
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$1F
	.byte	$53
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$53
	.byte	$2B
	.byte	$03
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$48
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$48
	.byte	$2B
	.byte	$03
	.byte	$51
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$51
	.byte	$2B
	.byte	$03
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$49
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$49
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$1F
	.byte	$4A
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4A
	.byte	$2B
	.byte	$03
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$4B
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4B
	.byte	$2B
	.byte	$03
	.byte	$4C
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4C
	.byte	$2B
	.byte	$03
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$4D
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4D
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$05
	.byte	$11
	.byte	$12
	.byte	$2B
	.byte	$12
	.byte	$13
	.byte	$07
	.byte	$2B
	.byte	$04
	.byte	$47
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$19
	.byte	$18
	.byte	$07
	.byte	$47
	.byte	$2B
	.byte	$03
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$14
	.byte	$15
	.byte	$2B
	.byte	$12
	.byte	$16
	.byte	$07
	.byte	$4F
	.byte	$2B
	.byte	$03
	.byte	$4B
	.byte	$2B
	.byte	$03
	.byte	$07
	.byte	$2B
	.byte	$17
	.byte	$4B
	.byte	$2B
	.byte	$03
	.byte	$4C
	.byte	$2B
	.byte	$1F
	.byte	$4F
	.byte	$2B
	.byte	$1F
	.byte	$4D
	.byte	$2B
	.byte	$1F
	.byte	$07
	.byte	$2B
	.byte	$1F
	.byte	$00
	.byte	$2B
	.byte	$08
	.byte	$AA
	.byte	$2B
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$2B
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$2B
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$2B
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$5A
	.byte	$2B
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$2B
	.byte	$04
	.byte	$00
	.byte	$2B
	.byte	$07
	.byte	$00
	.byte	$2B
	.byte	$00
_pal_zx_loading:
	.byte	$0F
	.byte	$05
	.byte	$2C
	.byte	$10
	.byte	$0F
	.byte	$20
	.byte	$10
	.byte	$05
	.byte	$0F
	.byte	$3D
	.byte	$3D
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_nametable_part1_bytes:
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$0B
	.byte	$57
	.byte	$06
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$0D
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5B
	.byte	$68
	.byte	$07
	.byte	$66
	.byte	$05
	.byte	$67
	.byte	$07
	.byte	$07
	.res	1,$00
_nametable_part1_visuals:
	.byte	$5D
	.byte	$5E
	.byte	$57
	.byte	$5F
	.byte	$04
	.byte	$60
	.byte	$57
	.byte	$06
	.byte	$07
	.byte	$09
	.byte	$61
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$54
	.byte	$04
	.byte	$62
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$63
	.byte	$63
_nametable_part1_music:
	.byte	$58
	.byte	$5F
	.byte	$57
	.byte	$5E
	.byte	$5B
	.byte	$06
	.byte	$07
	.byte	$64
	.byte	$0F
	.byte	$65
	.byte	$5C
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
_twisterText:
	.byte	$00
	.byte	$68
	.byte	$08
	.byte	$E7
	.byte	$DE
	.byte	$F0
	.byte	$EC
	.byte	$E4
	.byte	$E8
	.byte	$E8
	.byte	$E5
	.byte	$01
	.byte	$74
	.byte	$08
	.byte	$E8
	.byte	$E5
	.byte	$DD
	.byte	$EC
	.byte	$E4
	.byte	$E8
	.byte	$E8
	.byte	$E5
	.byte	$02
	.byte	$64
	.byte	$04
	.byte	$DD
	.byte	$DE
	.byte	$E6
	.byte	$E8
	.byte	$03
	.byte	$70
	.byte	$05
	.byte	$E2
	.byte	$E7
	.byte	$ED
	.byte	$EB
	.byte	$E8
	.byte	$00
	.byte	$70
	.byte	$08
	.byte	$E0
	.byte	$EB
	.byte	$DA
	.byte	$E9
	.byte	$E1
	.byte	$E2
	.byte	$DC
	.byte	$EC
	.byte	$01
	.byte	$64
	.byte	$05
	.byte	$E6
	.byte	$EE
	.byte	$EC
	.byte	$E2
	.byte	$DC
	.byte	$02
	.byte	$74
	.byte	$05
	.byte	$E0
	.byte	$DA
	.byte	$E6
	.byte	$DE
	.byte	$EC
	.byte	$03
	.byte	$68
	.byte	$08
	.byte	$EB
	.byte	$DE
	.byte	$DA
	.byte	$E5
	.byte	$E2
	.byte	$ED
	.byte	$E6
	.byte	$DE
	.byte	$00
	.byte	$68
	.byte	$0A
	.byte	$E9
	.byte	$EB
	.byte	$E8
	.byte	$DC
	.byte	$DE
	.byte	$DD
	.byte	$EE
	.byte	$EB
	.byte	$DA
	.byte	$E5
	.byte	$01
	.byte	$74
	.byte	$08
	.byte	$ED
	.byte	$DE
	.byte	$F1
	.byte	$ED
	.byte	$E6
	.byte	$E8
	.byte	$DD
	.byte	$DE
	.byte	$02
	.byte	$64
	.byte	$04
	.byte	$F0
	.byte	$E2
	.byte	$E5
	.byte	$DD
	.byte	$03
	.byte	$70
	.byte	$0B
	.byte	$DB
	.byte	$DB
	.byte	$EA
	.byte	$00
	.byte	$DC
	.byte	$E8
	.byte	$E6
	.byte	$E9
	.byte	$E8
	.byte	$00
	.byte	$F6
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$DA
	.byte	$E7
	.byte	$DD
	.byte	$01
	.byte	$64
	.byte	$02
	.byte	$EC
	.byte	$E8
	.byte	$02
	.byte	$74
	.byte	$04
	.byte	$E6
	.byte	$EE
	.byte	$DC
	.byte	$E1
	.byte	$03
	.byte	$68
	.byte	$05
	.byte	$E6
	.byte	$E8
	.byte	$EB
	.byte	$DE
	.byte	$F6
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
_bigTextX:
	.res	1,$00
_bigTextY:
	.res	1,$00
_pal_i:
	.res	1,$00
_fr:
	.res	1,$00
_i:
	.res	1,$00
_spr:
	.res	1,$00
_sq_scroll_pos:
	.res	1,$00
_imsb:
	.res	1,$00
_scrollRow:
	.res	1,$00
_scrollPage:
	.res	2,$00
_from_x:
	.res	1,$00
_frame:
	.res	2,$00
_musCheckpoint:
	.res	2,$00
_p:
	.res	1,$00
_fx:
	.res	1,$00
_fy:
	.res	1,$00
_bright:
	.res	1,$00
_to_bright:
	.res	1,$00
_gfrm:
	.res	2,$00
.segment	"BSS"
_buffa:
	.res	256,$00
_pad:
	.res	1,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_twisterAdr:
	.res	1,$00
_yyy:
	.res	1,$00
_x1:
	.res	1,$00
_x2:
	.res	1,$00
_y1:
	.res	1,$00
_chunk:
	.res	1,$00
_chunkAdr:
	.res	1,$00
_yfrom:
	.res	1,$00
_yto:
	.res	1,$00
_tadr:
	.res	1,$00
_tqty:
	.res	1,$00
_txtadr:
	.res	1,$00
_tx:
	.res	2,$00
_ty:
	.res	2,$00
_tdx:
	.res	2,$00
_tdy:
	.res	2,$00
_stx:
	.res	2,$00
_sty:
	.res	2,$00
_rtadr:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ cnrom_set_bank (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cnrom_set_bank: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; bank&=3;
;
	jsr     decsp2
	ldy     #$02
	lda     (sp),y
	and     #$03
	sta     (sp),y
;
; ptr=(unsigned char*)&bus_conflict[bank];
;
	lda     #<(_bus_conflict)
	ldx     #>(_bus_conflict)
	clc
	adc     (sp),y
	bcc     L21F2
	inx
L21F2:	jsr     stax0sp
;
; *ptr=bank;
;
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ _pal_fade_to (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__pal_fade_to: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; while(bright!=to)
;
	jmp     L21F8
;
; delay(4);
;
L21F6:	lda     #$04
	jsr     _delay
;
; if(bright<to) ++bright; else --bright;
;
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L2F1A
	inc     _bright
	jmp     L2F19
L2F1A:	dec     _bright
;
; pal_bright(bright);
;
L2F19:	lda     _bright
	jsr     _pal_bright
;
; while(bright!=to)
;
L21F8:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L21F6
	cmp     _bright
	bne     L21F6
;
; } 
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ setup_scene1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_scene1: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_FIRE_CHUNKS_ZX);
;
	lda     #$00
	jsr     _cnrom_set_bank
;
; pal_bg(pal_zx_loading);
;
	lda     #<(_pal_zx_loading)
	ldx     #>(_pal_zx_loading)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(part1_zx_loading_nam);
;
	lda     #<(_part1_zx_loading_nam)
	ldx     #>(_part1_zx_loading_nam)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(part1_zx_pilotone_nam);
;
	lda     #<(_part1_zx_pilotone_nam)
	ldx     #>(_part1_zx_pilotone_nam)
	jsr     _vram_unrle
;
; pal_col(9,0x10);
;
	lda     #$09
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; pal_col(10,0x10);
;
	lda     #$0A
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; pal_col(5,0x10);
;
	lda     #$05
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; pal_col(6,0x10);
;
	lda     #$06
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; pal_col(7,0x10);
;
	lda     #$07
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ zx_loading (unsigned int, unsigned char, unsigned char, unsigned char, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_zx_loading: near

.segment	"CODE"

;
; void zx_loading(unsigned int length, unsigned char color1, unsigned char color2, unsigned char freq, unsigned int scroll_pos){
;
	jsr     pushax
;
; scroll(scroll_pos,0);
;
	jsr     decsp1
	ldy     #$04
	jsr     pushwysp
	ldx     #$00
	txa
	jsr     _scroll
;
; i = 0;
;
	lda     #$00
	tay
;
; while (muspos < length) {
;
	jmp     L2F1C
;
; if (!(i&freq)){
;
L24D5:	ldy     #$03
	lda     (sp),y
	ldy     #$00
	and     (sp),y
	tax
	bne     L24D9
;
; pal_col(1,color1);
;
	lda     #$01
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	jsr     _pal_col
;
; pal_col(2,color2);
;
	lda     #$02
;
; else {
;
	jmp     L2F1F
;
; pal_col(2,color1);
;
L24D9:	lda     #$02
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	jsr     _pal_col
;
; pal_col(1,color2);    
;
	lda     #$01
L2F1F:	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     _pal_col
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; i++;
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
L2F1C:	sta     (sp),y
;
; while (muspos < length) {
;
	lda     _muspos
	ldy     #$06
	cmp     (sp),y
	lda     _muspos+1
	iny
	sbc     (sp),y
	bcc     L24D5
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ skip_frames (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skip_frames: near

.segment	"CODE"

;
; void skip_frames(unsigned char length){
;
	jsr     pusha
;
; for (i=0; i<length; ++i){
;
	jsr     decsp1
	lda     #$00
	tay
L2F20:	sta     (sp),y
	iny
	cmp     (sp),y
	bcs     L24EF
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (i=0; i<length; ++i){
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L2F20
;
; }
;
L24EF:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ zx_border (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_zx_border: near

.segment	"CODE"

;
; void zx_border(unsigned char color){
;
	jsr     pusha
;
; pal_col(1,color);
;
	lda     #$01
	jsr     pusha
	tay
	lda     (sp),y
	jsr     _pal_col
;
; pal_col(2,color);
;
	lda     #$02
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _pal_col
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ scene1_ZXloading (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scene1_ZXloading: near

.segment	"CODE"

;
; zx_loading(192, 0x2c, 0x05, 4, 0);
;
	jsr     decsp5
	lda     #$C0
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; zx_loading(192+5, 0x28, 0x01, 3, 256);
;
	jsr     decsp5
	lda     #$C5
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; pal_col(9,0x0f);
;
	lda     #$09
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; zx_border(0x10);
;
	lda     #$10
	jsr     _zx_border
;
; while (muspos < 250) {
;
	jmp     L2512
;
; ppu_wait_nmi();
;
L2510:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 250) {
;
L2512:	lda     _muspos+1
	cmp     #$00
	bne     L2514
	lda     _muspos
	cmp     #$FA
L2514:	bcc     L2510
;
; zx_border(0x05);
;
	lda     #$05
	jsr     _zx_border
;
; while (muspos < 290) {
;
	jmp     L251C
;
; ppu_wait_nmi();
;
L251A:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290) {
;
L251C:	lda     _muspos+1
	cmp     #$01
	bne     L251E
	lda     _muspos
	cmp     #$22
L251E:	bcc     L251A
;
; zx_loading(290+192, 0x2c, 0x05, 4, 0);
;
	jsr     decsp5
	lda     #$E2
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; zx_loading(290+192+6, 0x28, 0x01, 5, 256);
;
	jsr     decsp5
	lda     #$E8
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; pal_col(9,0x20);
;
	lda     #$09
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; pal_col(10,0x0f);
;
	lda     #$0A
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(5,0x30);
;
	lda     #$05
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; pal_col(6,0x0f);
;
	lda     #$06
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(7,0x06);
;
	lda     #$07
	jsr     pusha
	lda     #$06
	jsr     _pal_col
;
; zx_border(0x2c);
;
	lda     #$2C
	jsr     _zx_border
;
; while (muspos < 290+192+20+10) {
;
	jmp     L2541
;
; ppu_wait_nmi();
;
L253F:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+20+10) {
;
L2541:	ldx     _muspos+1
	cpx     #$02
	bcc     L253F
;
; zx_border(0x05);
;
	lda     #$05
	jsr     _zx_border
;
; while (muspos < 290+192+20+10+25) {
;
	jmp     L254A
;
; ppu_wait_nmi();
;
L2548:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+20+10+25) {
;
L254A:	lda     _muspos+1
	cmp     #$02
	bne     L254C
	lda     _muspos
	cmp     #$19
L254C:	bcc     L2548
;
; zx_loading(290+192+192, 0x06, 0x0f, 2, 0);
;
	jsr     decsp5
	lda     #$A2
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$02
	sta     (sp),y
	lda     #$06
	ldy     #$02
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; multi_vram_buffer_horz((unsigned char *) nametable_part1_bytes, 22, NAMETABLE_A+32 * 7 + 4);
;
	jsr     decsp3
	lda     #<(_nametable_part1_bytes)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_nametable_part1_bytes)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$E4
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char *) nametable_part1_bytes, 22, NAMETABLE_B+32 * 7 + 4);
;
	jsr     decsp3
	lda     #<(_nametable_part1_bytes)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_nametable_part1_bytes)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$24
	lda     #$E4
	jsr     _multi_vram_buffer_horz
;
; zx_loading(290+192+192+5, 0x10, 0x01, 3, 256);
;
	jsr     decsp5
	lda     #$A7
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$02
	sta     (sp),y
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; zx_border(0x06);
;
	lda     #$06
	jsr     _zx_border
;
; while (muspos < 290+192+192+5+25) {
;
	jmp     L2568
;
; ppu_wait_nmi();
;
L2566:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+5+25) {
;
L2568:	lda     _muspos+1
	cmp     #$02
	bne     L256A
	lda     _muspos
	cmp     #$C0
L256A:	bcc     L2566
;
; zx_border(0x0f);
;
	lda     #$0F
	jsr     _zx_border
;
; while (muspos < 290+192+192+5+50) {
;
	jmp     L2572
;
; ppu_wait_nmi();
;
L2570:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+5+50) {
;
L2572:	lda     _muspos+1
	cmp     #$02
	bne     L2574
	lda     _muspos
	cmp     #$D9
L2574:	bcc     L2570
;
; zx_loading(290+192+192+192, 0x14, 0x07, 4, 0);
;
	jsr     decsp5
	lda     #$62
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$03
	sta     (sp),y
	lda     #$14
	ldy     #$02
	sta     (sp),y
	lda     #$07
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz((unsigned char *) nametable_part1_visuals, 22, NAMETABLE_A+32 * 9 + 4);
;
	jsr     decsp3
	lda     #<(_nametable_part1_visuals)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_nametable_part1_visuals)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$24
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char *) nametable_part1_visuals, 22, NAMETABLE_B+32 * 9 + 4);
;
	jsr     decsp3
	lda     #<(_nametable_part1_visuals)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_nametable_part1_visuals)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$25
	lda     #$24
	jsr     _multi_vram_buffer_horz
;
; zx_loading(290+192+192+192+5, 0x1c, 0x05, 5, 256);
;
	jsr     decsp5
	lda     #$67
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$03
	sta     (sp),y
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; zx_border(0x04);
;
	lda     #$04
	jsr     _zx_border
;
; while (muspos < 290+192+192+192+5+25) {
;
	jmp     L2591
;
; ppu_wait_nmi();
;
L258F:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+192+5+25) {
;
L2591:	lda     _muspos+1
	cmp     #$03
	bne     L2593
	lda     _muspos
	cmp     #$80
L2593:	bcc     L258F
;
; zx_border(0x0f);
;
	lda     #$0F
	jsr     _zx_border
;
; while (muspos < 290+192+192+192+5+50) {
;
	jmp     L259B
;
; ppu_wait_nmi();
;
L2599:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+192+5+50) {
;
L259B:	lda     _muspos+1
	cmp     #$03
	bne     L259D
	lda     _muspos
	cmp     #$99
L259D:	bcc     L2599
;
; zx_loading(290+192+192+192+192, 0x2c, 0x0c, 4, 0);
;
	jsr     decsp5
	lda     #$22
	ldy     #$03
	sta     (sp),y
	iny
	tya
	sta     (sp),y
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz((unsigned char *) nametable_part1_music, 22, NAMETABLE_A+32 * 11 + 4);
;
	jsr     decsp3
	lda     #<(_nametable_part1_music)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_nametable_part1_music)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$64
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char *) nametable_part1_music, 22, NAMETABLE_B+32 * 11 + 4);
;
	jsr     decsp3
	lda     #<(_nametable_part1_music)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_nametable_part1_music)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$25
	lda     #$64
	jsr     _multi_vram_buffer_horz
;
; zx_loading(290+192+192+192+192+5, 0x28, 0x01, 3, 256);
;
	jsr     decsp5
	lda     #$27
	ldy     #$03
	sta     (sp),y
	iny
	tya
	sta     (sp),y
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; zx_border(0x02);
;
	lda     #$02
	jsr     _zx_border
;
; while (muspos < 290+192+192+192+192+5+25) {
;
	jmp     L25BA
;
; ppu_wait_nmi();
;
L25B8:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+192+192+5+25) {
;
L25BA:	lda     _muspos+1
	cmp     #$04
	bne     L25BC
	lda     _muspos
	cmp     #$40
L25BC:	bcc     L25B8
;
; zx_border(0x2c);
;
	lda     #$2C
	jsr     _zx_border
;
; while (muspos < 290+192+192+192+192+5+50) {
;
	jmp     L25C4
;
; ppu_wait_nmi();
;
L25C2:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+192+192+5+50) {
;
L25C4:	lda     _muspos+1
	cmp     #$04
	bne     L25C6
	lda     _muspos
	cmp     #$59
L25C6:	bcc     L25C2
;
; zx_loading(290+192+192+192+192+192, 0x27, 0x05, 2, 0);
;
	jsr     decsp5
	lda     #$E2
	ldy     #$03
	sta     (sp),y
	iny
	tya
	sta     (sp),y
	lda     #$27
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; zx_loading(290+192+192+192+192+192+5, 0x28, 0x01, 6, 256);
;
	jsr     decsp5
	lda     #$E7
	ldy     #$03
	sta     (sp),y
	iny
	tya
	sta     (sp),y
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; zx_border(0x05);
;
	lda     #$05
	jsr     _zx_border
;
; _pal_fade_to(0);
;
	ldx     #$00
	txa
	jsr     __pal_fade_to
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; while (muspos < 290+192+192+192+192+192 +32) {
;
	jmp     L25E0
;
; ppu_wait_nmi();
;
L25DE:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 290+192+192+192+192+192 +32) {
;
L25E0:	lda     _muspos+1
	cmp     #$05
	bne     L25E2
	lda     _muspos
	cmp     #$02
L25E2:	bcc     L25DE
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxTwisterSetup (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxTwisterSetup: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_FIRE_CHUNKS_ZX);
;
	lda     #$00
	jsr     _cnrom_set_bank
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; pal_col(0,0x0D);
;
	lda     #$00
	jsr     pusha
	lda     #$0D
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; pal_col(2,0x21);
;
	lda     #$02
	jsr     pusha
	lda     #$21
	jsr     _pal_col
;
; pal_col(3,0x13);
;
	lda     #$03
	jsr     pusha
	lda     #$13
	jsr     _pal_col
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; fxFrame = 0;
;
	lda     #$00
	sta     _fxFrame
	sta     _fxFrame+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxTwisterFrame (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxTwisterFrame: near

.segment	"CODE"

;
; void fxTwisterFrame(frm) {
;
	jsr     pushax
;
; memfill32(fire_array, 0, twLines);
;
	jsr     decsp3
	lda     #<(_fire_array)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_fire_array)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	lda     #$06
	jsr     _memfill32
;
; yfrom = frm * twLines;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax6
	sta     _yfrom
;
; yto = yfrom + twLines;
;
	clc
	adc     #$06
	sta     _yto
;
; yyy = 0;
;
	sty     _yyy
;
; for (y = yfrom; y < yto; y++) {
;
	lda     _yfrom
	sta     _y
L2F27:	lda     _y
	cmp     _yto
	jcs     L2F2A
;
; x1 = xa + 6*y;
;
	lda     _xa
	jsr     pusha0
	lda     _y
	jsr     mulax6
	jsr     tosaddax
	sta     _x1
;
; x2 = za + 6*y;
;
	lda     _za
	jsr     pusha0
	lda     _y
	jsr     mulax6
	jsr     tosaddax
	sta     _x2
;
; y1 = ya + y;
;
	lda     _ya
	clc
	adc     _y
	sta     _y1
;
; chunkAdr = 32 * (twisterSin[y1] / 16);
;
	ldy     _y1
	lda     _twisterSin,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _chunkAdr
;
; twisterAdr = (twisterSin[y1] & 15) * 16;
;
	ldy     _y1
	lda     _twisterSin,y
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _twisterAdr
;
; buffAdr = yyy*32 + (twisterSinX[x1] + twisterSinX[x2]) / 2;
;
	ldx     #$00
	lda     _yyy
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     sreg
	ldy     _x1
	lda     _twisterSinX,y
	sta     ptr1
	ldy     _x2
	ldx     #$00
	lda     _twisterSinX,y
	clc
	adc     ptr1
	ror     a
	clc
	adc     sreg
	sta     _buffAdr
	txa
	adc     tmp1
;
; for (x = 0; x < 16; x++) {
;
	stx     _x
L2F28:	lda     _x
	cmp     #$10
	bcs     L2F29
;
; chunk = twisterData[twisterAdr];
;
	ldy     _twisterAdr
	lda     _twisterData,y
	sta     _chunk
;
; fire_array[buffAdr] = twisterChunks[chunk + chunkAdr];
;
	lda     #<(_fire_array)
	ldx     #>(_fire_array)
	clc
	adc     _buffAdr
	bcc     L2731
	inx
L2731:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _chunk
	clc
	adc     _chunkAdr
	bcc     L2F22
	inx
L2F22:	sta     ptr1
	txa
	clc
	adc     #>(_twisterChunks)
	sta     ptr1+1
	ldy     #<(_twisterChunks)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; buffAdr += 1;
;
	inc     _buffAdr
;
; twisterAdr += 1;
;
	inc     _twisterAdr
;
; for (x = 0; x < 16; x++) {
;
	inc     _x
	jmp     L2F28
;
; yyy++;
;
L2F29:	inc     _yyy
;
; for (y = yfrom; y < yto; y++) {
;
	inc     _y
	jmp     L2F27
;
; tqty = 4;
;
L2F2A:	lda     #$04
	sta     _tqty
;
; txtadr = twTextAdr;
;
	lda     _twTextAdr
	sta     _txtadr
;
; if (twisterText[txtadr] == 255) {
;
	ldy     _txtadr
	lda     _twisterText,y
	cmp     #$FF
	jne     L2F2D
;
; return;
;
	jmp     incsp2
;
; if (twisterText[txtadr] == frm) {
;
L2741:	ldy     _txtadr
	ldx     #$00
	lda     _twisterText,y
	ldy     #$00
	cmp     (sp),y
	jne     L2F2C
	txa
	iny
	cmp     (sp),y
	bne     L2F2C
;
; tadr = twisterText[txtadr + 1];
;
	lda     _txtadr
	clc
	adc     #$01
	bcc     L274C
	inx
L274C:	sta     ptr1
	txa
	clc
	adc     #>(_twisterText)
	sta     ptr1+1
	ldy     #<(_twisterText)
	lda     (ptr1),y
	sta     _tadr
;
; for (x = 0; x < twisterText[txtadr + 2]; x++) {
;
	lda     #$00
	sta     _x
L2F2B:	lda     _x
	jsr     pusha0
	lda     _txtadr
	clc
	adc     #$02
	bcc     L2755
	ldx     #$01
L2755:	sta     ptr1
	txa
	clc
	adc     #>(_twisterText)
	sta     ptr1+1
	ldy     #<(_twisterText)
	lda     (ptr1),y
	jsr     tosicmp0
	bcs     L274E
;
; fire_array[tadr] = twisterText[txtadr + 3 + x];
;
	lda     #<(_fire_array)
	ldx     #>(_fire_array)
	clc
	adc     _tadr
	bcc     L2759
	inx
L2759:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _txtadr
	clc
	adc     #$03
	bcc     L2F26
	inx
	clc
L2F26:	adc     _x
	bcc     L2F23
	inx
L2F23:	sta     ptr1
	txa
	clc
	adc     #>(_twisterText)
	sta     ptr1+1
	ldy     #<(_twisterText)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; tadr++;
;
	inc     _tadr
;
; for (x = 0; x < twisterText[txtadr + 2]; x++) {
;
	inc     _x
	jmp     L2F2B
;
; txtadr += twisterText[txtadr + 2] + 3;
;
L274E:	ldx     #$00
L2F2C:	lda     _txtadr
	clc
	adc     #$02
	bcc     L2761
	inx
L2761:	sta     ptr1
	txa
	clc
	adc     #>(_twisterText)
	sta     ptr1+1
	ldy     #<(_twisterText)
	lda     (ptr1),y
	clc
	adc     #$03
	clc
	adc     _txtadr
	sta     _txtadr
;
; --tqty;
;
	dec     _tqty
;
; while (tqty > 0) {
;
L2F2D:	lda     _tqty
	jne     L2741
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fxTwister (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxTwister: near

.segment	"CODE"

;
; set_nmi_user_call_on();
;
	jsr     _set_nmi_user_call_on
;
; set_nmi_user_vram_lines_qty(twLines);
;
	lda     #$06
	jsr     _set_nmi_user_vram_lines_qty
;
; for (frm = 0; frm < 4; frm++) {
;
	lda     #$00
	sta     _frm
L2F2F:	lda     _frm
	cmp     #$04
	bcs     L2769
;
; if (scrSwap == 0) {
;
	lda     _scrSwap
	bne     L2770
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; fxTwisterFrame(frm);
;
	lda     _frm
	ldx     #$00
	jsr     _fxTwisterFrame
;
; set_nmi_user_vram_adr(NAMETABLE_B + 64+32 + frm*32*twLines);
;
	ldx     #$00
	lda     _frm
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     mulax6
	clc
	adc     #$60
	pha
	txa
	adc     #$24
;
; } else {
;
	jmp     L2F32
;
; scroll(256,0);
;
L2770:	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
;
; fxTwisterFrame(frm);
;
	lda     _frm
	ldx     #$00
	jsr     _fxTwisterFrame
;
; set_nmi_user_vram_adr(NAMETABLE_A + 64+32 + frm*32*twLines);
;
	ldx     #$00
	lda     _frm
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     mulax6
	clc
	adc     #$60
	pha
	txa
	adc     #$20
L2F32:	tax
	pla
	jsr     _set_nmi_user_vram_adr
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (frm = 0; frm < 4; frm++) {
;
	inc     _frm
	jmp     L2F2F
;
; if (muspos >= twTextTimer) {
;
L2769:	lda     _muspos
	cmp     _twTextTimer
	lda     _muspos+1
	sbc     _twTextTimer+1
	bcc     L2783
;
; twTextTimer += twTextDelay;
;
	lda     #$C0
	clc
	adc     _twTextTimer
	sta     _twTextTimer
	bcc     L2787
	inc     _twTextTimer+1
;
; twTextAdr = txtadr;
;
L2787:	lda     #$00
	sta     _twTextAdr+1
	lda     _txtadr
	sta     _twTextAdr
;
; muspos = get_mus_pos();
;
L2783:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; xa += 8;
;
	lda     #$08
	clc
	adc     _xa
	sta     _xa
;
; za += 12;
;
	lda     #$0C
	clc
	adc     _za
	sta     _za
;
; ya += 4;
;
	lda     #$04
	clc
	adc     _ya
	sta     _ya
;
; scrSwap ^= 1;
;
	lda     _scrSwap
	eor     #$01
	sta     _scrSwap
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxPlasmSetup (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxPlasmSetup: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_col(0,0x09);
;
	lda     #$00
	jsr     pusha
	lda     #$09
	jsr     _pal_col
;
; pal_col(2,0x19);
;
	lda     #$02
	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; pal_col(1,0x30);
;
	lda     #$01
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; pal_col(3,0x29);
;
	lda     #$03
	jsr     pusha
	lda     #$29
	jsr     _pal_col
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,2048);
;
	lda     #$00
	jsr     pusha
	ldx     #$08
	jsr     _vram_fill
;
; cnrom_set_bank(TILESET_CHUNKS_FONT_INVADERS);
;
	lda     #$01
	jsr     _cnrom_set_bank
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; fxFrame = 0;
;
	lda     #$00
	sta     _fxFrame
	sta     _fxFrame+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxPlasmFrame (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxPlasmFrame: near

.segment	"CODE"

;
; void fxPlasmFrame(frm) {
;
	jsr     pushax
;
; buffAdr = 0;
;
	lda     #$00
	sta     _buffAdr
;
; yfrom = frm * plsmLines;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax5
	sta     _yfrom
;
; yto = frm * plsmLines + plsmLines;
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax5
	clc
	adc     #$05
	sta     _yto
;
; yy = ya + yfrom;
;
	lda     _ya
	clc
	adc     _yfrom
	sta     _yy
;
; for (y = yfrom; y < yto; y++) {
;
	lda     _yfrom
	sta     _y
L2F38:	lda     _y
	cmp     _yto
	bcs     L27B7
;
; xx = xa;
;
	lda     _xa
	sta     _xx
;
; xy = y + xya;
;
	lda     _y
	clc
	adc     _xya
	sta     _xy
;
; for (x = 0; x < 32; x++) {
;
	lda     #$00
	sta     _x
L2F39:	lda     _x
	cmp     #$20
	bcs     L2F3A
;
; fire_array[buffAdr] = 0x80 + ((colorAdd + sinTbl1[xx] + sinTbl2[yy] + sinTbl3[xy]) & 31);
;
	lda     #<(_fire_array)
	ldx     #>(_fire_array)
	clc
	adc     _buffAdr
	bcc     L27CC
	inx
L27CC:	sta     sreg
	stx     sreg+1
	ldy     _xx
	lda     _sinTbl1,y
	clc
	adc     _colorAdd
	sta     ptr1
	ldy     _yy
	lda     _sinTbl2,y
	clc
	adc     ptr1
	sta     ptr1
	ldy     _xy
	lda     _sinTbl3,y
	clc
	adc     ptr1
	and     #$1F
	clc
	adc     #$80
	ldy     #$00
	sta     (sreg),y
;
; ++buffAdr;
;
	inc     _buffAdr
;
; ++xx;
;
	inc     _xx
;
; ++xy;
;
	inc     _xy
;
; for (x = 0; x < 32; x++) {
;
	inc     _x
	jmp     L2F39
;
; ++yy;
;
L2F3A:	inc     _yy
;
; for (y = yfrom; y < yto; y++) {
;
	inc     _y
	jmp     L2F38
;
; }
;
L27B7:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fxPlasm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxPlasm: near

.segment	"CODE"

;
; for (frm = 0; frm < 6; frm++) {
;
	lda     #$00
	sta     _frm
L2F3C:	lda     _frm
	cmp     #$06
	bcs     L2F3D
;
; set_nmi_user_call_on();
;
	jsr     _set_nmi_user_call_on
;
; set_nmi_user_vram_lines_qty(plsmLines);
;
	lda     #$05
	jsr     _set_nmi_user_vram_lines_qty
;
; if (scrSwap == 0) {
;
	lda     _scrSwap
	bne     L27E7
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; fxPlasmFrame(frm);
;
	lda     _frm
	ldx     #$00
	jsr     _fxPlasmFrame
;
; set_nmi_user_vram_adr(NAMETABLE_B + frm*32*plsmLines);
;
	ldx     #$00
	lda     _frm
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     mulax5
	pha
	txa
	clc
	adc     #$24
;
; } else {
;
	jmp     L2F40
;
; scroll(256,0);
;
L27E7:	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
;
; fxPlasmFrame(frm);
;
	lda     _frm
	ldx     #$00
	jsr     _fxPlasmFrame
;
; set_nmi_user_vram_adr(NAMETABLE_A + frm*32*plsmLines);
;
	ldx     #$00
	lda     _frm
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     mulax5
	pha
	txa
	clc
	adc     #$20
L2F40:	tax
	pla
	jsr     _set_nmi_user_vram_adr
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (frm = 0; frm < 6; frm++) {
;
	inc     _frm
	jmp     L2F3C
;
; xa+=1;
;
L2F3D:	inc     _xa
;
; ya+=1;
;
	inc     _ya
;
; xya-=1;
;
	dec     _xya
;
; colorAdd += 1;
;
	inc     _colorAdd
;
; scrSwap ^= 1;
;
	lda     _scrSwap
	eor     #$01
	sta     _scrSwap
;
; fxFrame++;
;
	lda     _fxFrame
	ldx     _fxFrame+1
	clc
	adc     #$01
	bcc     L2805
	inx
L2805:	sta     _fxFrame
	stx     _fxFrame+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ chr_to_nametable (unsigned int, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chr_to_nametable: near

.segment	"CODE"

;
; void chr_to_nametable(unsigned int nametable, unsigned char *src) {
;
	jsr     pushax
;
; for (p=0;p<4;++p) {
;
	jsr     decsp1
	lda     #$00
	tay
L2F41:	sta     (sp),y
	cmp     #$04
	bcs     L2808
;
; vram_adr((int) src+(p*256));
;
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	tax
	lda     #$00
	jsr     tosaddax
	jsr     _vram_adr
;
; vram_read(buffa, 256);
;
	lda     #<(_buffa)
	ldx     #>(_buffa)
	jsr     pushax
	ldx     #$01
	lda     #$00
	jsr     _vram_read
;
; vram_adr(nametable+(p*256));
;
	ldy     #$06
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	tax
	lda     #$00
	jsr     tosaddax
	jsr     _vram_adr
;
; vram_write(buffa, 256);
;
	lda     #<(_buffa)
	ldx     #>(_buffa)
	jsr     pushax
	ldx     #$01
	lda     #$00
	jsr     _vram_write
;
; for (p=0;p<4;++p) {
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L2F41
;
; }
;
L2808:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ fxRotorSetup (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxRotorSetup: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; platforms[0]=9;
;
	lda     #$09
	sta     _platforms
;
; platforms[1]=128;
;
	lda     #$80
	sta     _platforms+1
;
; platforms[2]=120-16;
;
	lda     #$68
	sta     _platforms+2
;
; platforms[5]=10;
;
	lda     #$0A
	sta     _platforms+5
;
; platforms[6]=128;
;
	lda     #$80
	sta     _platforms+6
;
; platforms[7]=136-16;
;
	lda     #$78
	sta     _platforms+7
;
; platforms[10]=0;
;
	lda     #$00
	sta     _platforms+10
;
; platforms[15]=0;
;
	sta     _platforms+15
;
; pal_clear();
;
	jsr     _pal_clear
;
; pal_col(2,0x01);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _pal_col
;
; pal_col(3,0x11);
;
	lda     #$03
	jsr     pusha
	lda     #$11
	jsr     _pal_col
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024-24);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$E8
	jsr     _vram_fill
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024-24);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$E8
	jsr     _vram_fill
;
; cnrom_set_bank(TILESET_CHUNKS_FONT_INVADERS);
;
	lda     #$01
	jsr     _cnrom_set_bank
;
; bank_bg(0);
;
	lda     #$00
	jsr     _bank_bg
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; pal_spr(pal_Platforms);
;
	lda     #<(_pal_Platforms)
	ldx     #>(_pal_Platforms)
	jsr     _pal_spr
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; fxFrame = 0;
;
	lda     #$00
	sta     _fxFrame
	sta     _fxFrame+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxRotorFrame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxRotorFrame: near

.segment	"CODE"

;
; buffAdr = 0;
;
	lda     #$00
	sta     _buffAdr
;
; tdx = 4*(twisterSin[xya] - 16);
;
	ldy     _xya
	tax
	lda     _twisterSin,y
	sec
	sbc     #$10
	bcs     L2859
	dex
L2859:	jsr     shlax2
	sta     _tdx
	stx     _tdx+1
;
; tdy = 4*(twisterSin[(xya + 64) & 255] - 24);
;
	lda     _xya
	clc
	adc     #$40
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_twisterSin)
	sta     ptr1+1
	ldy     #<(_twisterSin)
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$18
	bcs     L2860
	dex
L2860:	jsr     shlax2
	sta     _tdy
	stx     _tdy+1
;
; while (buffAdr < rotorSz) {
;
	jmp     L2863
;
; stx = tx;
;
L2861:	lda     _tx+1
	sta     _stx+1
	lda     _tx
	sta     _stx
;
; sty = ty;
;
	lda     _ty+1
	sta     _sty+1
	lda     _ty
	sta     _sty
;
; for (x = 32; x > 0; --x) {
;
	lda     #$20
	sta     _x
L2F42:	lda     _x
	beq     L286A
;
; rtadr = 16*(15&(ty/256)) + (15&(tx/256));
;
	lda     _ty+1
	and     #$0F
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     _tx+1
	and     #$0F
	clc
	adc     ptr1
	sta     _rtadr
;
; fire_array[buffAdr] = rotorData[rtadr];
;
	lda     #<(_fire_array)
	ldx     #>(_fire_array)
	clc
	adc     _buffAdr
	bcc     L2879
	inx
L2879:	sta     ptr1
	stx     ptr1+1
	ldy     _rtadr
	lda     _rotorData,y
	ldy     #$00
	sta     (ptr1),y
;
; tx += tdx;
;
	lda     _tdx
	clc
	adc     _tx
	sta     _tx
	lda     _tdx+1
	adc     _tx+1
	sta     _tx+1
;
; ty += tdy;
;
	lda     _tdy
	clc
	adc     _ty
	sta     _ty
	lda     _tdy+1
	adc     _ty+1
	sta     _ty+1
;
; ++buffAdr;
;
	inc     _buffAdr
;
; for (x = 32; x > 0; --x) {
;
	dec     _x
	jmp     L2F42
;
; tx = stx + tdy;
;
L286A:	lda     _stx
	clc
	adc     _tdy
	sta     _tx
	lda     _stx+1
	adc     _tdy+1
	sta     _tx+1
;
; ty = sty - tdx;
;
	lda     _sty
	sec
	sbc     _tdx
	sta     _ty
	lda     _sty+1
	sbc     _tdx+1
	sta     _ty+1
;
; while (buffAdr < rotorSz) {
;
L2863:	lda     _buffAdr
	cmp     #$80
	jcc     L2861
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ showPlatforms (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_showPlatforms: near

.segment	"CODE"

;
; for (i=0;i<4;++i)
;
	jsr     decsp6
	lda     #$00
	sta     _i
L2F49:	lda     _i
	cmp     #$04
	bcc     L2F4B
;
; }
;
	jmp     incsp6
;
; objPos=i*5;
;
L2F4B:	ldx     #$00
	lda     _i
	jsr     mulax5
	ldy     #$05
	sta     (sp),y
;
; objID=platforms[objPos+OBJ_ID];
;
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #<(_platforms)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
;
; if (objID!=OBJ_NULL) {
;
	lda     (sp),y
	jeq     L2F4A
;
; objX=platforms[objPos+OBJ_X];
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L2899
	inx
L2899:	sta     ptr1
	txa
	clc
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #<(_platforms)
	lda     (ptr1),y
	ldy     #$03
	sta     (sp),y
;
; objY=platforms[objPos+OBJ_Y];
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$02
	bcc     L289D
	inx
L289D:	sta     ptr1
	txa
	clc
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #<(_platforms)
	lda     (ptr1),y
	ldy     #$04
	sta     (sp),y
;
; objTimer=platforms[objPos+OBJ_TIMER];
;
	iny
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$03
	bcc     L28A1
	inx
L28A1:	sta     ptr1
	txa
	clc
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #<(_platforms)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
;
; objFrame=platforms[objPos+OBJ_FRAME];
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$04
	bcc     L28A5
	inx
L28A5:	sta     ptr1
	txa
	clc
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #<(_platforms)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
;
; spr=oam_meta_spr(objX, objY+sineTableTextBobbling[platforms[objPos+OBJ_FRAME]], spr, platforms_list[objID-1]);
;
	jsr     decsp3
	ldy     #$06
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$04
	bcc     L28AC
	ldx     #$01
L28AC:	sta     ptr1
	txa
	clc
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #<(_platforms)
	ldx     #$00
	lda     (ptr1),y
	asl     a
	bcc     L2F45
	inx
	clc
L2F45:	adc     #<(_sineTableTextBobbling)
	sta     ptr1
	txa
	adc     #>(_sineTableTextBobbling)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L28B0
	dex
L28B0:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_platforms_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_platforms_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _spr
;
; if (!objTimer)
;
	ldy     #$02
	lda     (sp),y
	bne     L28B1
;
; ++objFrame;
;
	dey
	clc
	tya
	adc     (sp),y
	sta     (sp),y
;
; if (objFrame>31) objFrame=0;
;
L28B1:	ldy     #$01
	lda     (sp),y
	cmp     #$20
	bcc     L28B4
	lda     #$00
	sta     (sp),y
;
; ++objTimer;
;
L28B4:	iny
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; objTimer&=1;
;
	and     #$01
	sta     (sp),y
;
; platforms[objPos+OBJ_Y]=objY;
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$02
	bcc     L2F46
	inx
	clc
L2F46:	adc     #<(_platforms)
	sta     ptr1
	txa
	adc     #>(_platforms)
	sta     ptr1+1
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; platforms[objPos+OBJ_TIMER]=objTimer;
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$03
	bcc     L2F47
	inx
	clc
L2F47:	adc     #<(_platforms)
	sta     ptr1
	txa
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; platforms[objPos+OBJ_FRAME]=objFrame;
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$04
	bcc     L2F48
	inx
	clc
L2F48:	adc     #<(_platforms)
	sta     ptr1
	txa
	adc     #>(_platforms)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; for (i=0;i<4;++i)
;
L2F4A:	inc     _i
	jmp     L2F49

.endproc

; ---------------------------------------------------------------
; void __near__ fxRotor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxRotor: near

.segment	"CODE"

;
; tx = 128*twisterSin[xa];
;
	ldy     _xa
	ldx     #$00
	lda     _twisterSin,y
	jsr     shlax4
	jsr     shlax3
	sta     _tx
	stx     _tx+1
;
; ty = 64*twisterSin[ya];
;
	ldy     _ya
	ldx     #$00
	lda     _twisterSin,y
	jsr     shlax4
	jsr     shlax2
	sta     _ty
	stx     _ty+1
;
; for (frm = 0; frm < 6; frm++) {
;
	lda     #$00
	sta     _frm
L2F4D:	lda     _frm
	cmp     #$06
	bcs     L2F4E
;
; set_nmi_user_call_on();
;
	jsr     _set_nmi_user_call_on
;
; set_nmi_user_vram_lines_qty(rotorLines);
;
	lda     #$04
	jsr     _set_nmi_user_vram_lines_qty
;
; if (scrSwap == 0) {
;
	lda     _scrSwap
	bne     L28DB
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; fxRotorFrame();
;
	jsr     _fxRotorFrame
;
; spr=0; 
;
	lda     #$00
	sta     _spr
;
; showPlatforms();
;
	jsr     _showPlatforms
;
; set_nmi_user_vram_adr(NAMETABLE_B + 96 + frm*32*rotorLines);
;
	ldx     #$00
	lda     _frm
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     shlax2
	clc
	adc     #$60
	pha
	txa
	adc     #$24
;
; } else {
;
	jmp     L2F51
;
; scroll(256,0);
;
L28DB:	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
;
; fxRotorFrame();
;
	jsr     _fxRotorFrame
;
; spr=0; 
;
	lda     #$00
	sta     _spr
;
; showPlatforms();
;
	jsr     _showPlatforms
;
; set_nmi_user_vram_adr(NAMETABLE_A + 96 + frm*32*rotorLines);
;
	ldx     #$00
	lda     _frm
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     shlax2
	clc
	adc     #$60
	pha
	txa
	adc     #$20
L2F51:	tax
	pla
	jsr     _set_nmi_user_vram_adr
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (frm = 0; frm < 6; frm++) {
;
	inc     _frm
	jmp     L2F4D
;
; xa+=2;
;
L2F4E:	lda     #$02
	clc
	adc     _xa
	sta     _xa
;
; ya+=3;
;
	lda     #$03
	clc
	adc     _ya
	sta     _ya
;
; xya+=5;
;
	lda     #$05
	clc
	adc     _xya
	sta     _xya
;
; scrSwap ^= 1;
;
	lda     _scrSwap
	eor     #$01
	sta     _scrSwap
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxPlasm16Frame (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxPlasm16Frame: near

.segment	"CODE"

;
; void fxPlasm16Frame(frm) {  
;
	jsr     pushax
;
; buffAdr = 0;
;
	jsr     decsp4
	lda     #$00
	sta     _buffAdr
;
; yfrom = frm*3;
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	ldy     #$01
	sta     (sp),y
;
; yto = frm*3 + 3;
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	clc
	adc     #$03
	ldy     #$00
	sta     (sp),y
;
; yy = ya + yfrom;
;
	iny
	lda     (sp),y
	clc
	adc     _ya
	sta     _yy
;
; for (y = yfrom; y < yto; y++) {
;
	lda     (sp),y
	ldy     #$03
L2F5D:	sta     (sp),y
	ldy     #$00
	cmp     (sp),y
	bcs     L2905
;
; xx = xa;
;
	lda     _xa
	sta     _xx
;
; xy = y + xya;
;
	ldy     #$03
	lda     (sp),y
	clc
	adc     _xya
	sta     _xy
;
; for (x = 0; x < 32; x++) {
;
	lda     #$00
	dey
L2F5C:	sta     (sp),y
	cmp     #$20
	bcs     L2F5B
;
; fire_array[buffAdr] = 0x80 + ((colorAdd + sinTbl1[xx] + sinTbl2[yy] + sinTbl3[xy]) & 15);
;
	lda     #<(_fire_array)
	ldx     #>(_fire_array)
	clc
	adc     _buffAdr
	bcc     L291A
	inx
L291A:	sta     sreg
	stx     sreg+1
	ldy     _xx
	lda     _sinTbl1,y
	clc
	adc     _colorAdd
	sta     ptr1
	ldy     _yy
	lda     _sinTbl2,y
	clc
	adc     ptr1
	sta     ptr1
	ldy     _xy
	lda     _sinTbl3,y
	clc
	adc     ptr1
	and     #$0F
	clc
	adc     #$80
	ldy     #$00
	sta     (sreg),y
;
; buffAdr+=1;
;
	inc     _buffAdr
;
; xx+=1;
;
	inc     _xx
;
; xy+=1;
;
	inc     _xy
;
; for (x = 0; x < 32; x++) {
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	jmp     L2F5C
;
; yy+=1;
;
L2F5B:	inc     _yy
;
; for (y = yfrom; y < yto; y++) {
;
	iny
	lda     (sp),y
	clc
	adc     #$01
	jmp     L2F5D
;
; }
;
L2905:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ fxPlasm16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxPlasm16: near

.segment	"CODE"

;
; for (frm = 0; frm < 8; frm++) {
;
	lda     #$00
	sta     _frm
L2F66:	lda     _frm
	cmp     #$08
	jcs     L2F68
;
; if (scrSwap == 0) {
;
	lda     _scrSwap
	jne     L2F67
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; fxPlasm16Frame(frm);
;
	lda     _frm
	ldx     #$00
	jsr     _fxPlasm16Frame
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz((unsigned char*) fire_array+0,16,NAMETABLE_B+frm*64+32+PLASMA16_POS_X + PLASMA16_POS_Y*32);
;
	jsr     decsp3
	lda     #<(_fire_array)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_fire_array)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _frm
	jsr     shlax4
	jsr     shlax2
	pha
	txa
	clc
	adc     #$24
	tax
	pla
	clc
	adc     #$20
	bcc     L2F5E
	inx
	clc
L2F5E:	adc     #$08
	bcc     L2F5F
	inx
	clc
L2F5F:	adc     #$80
	bcc     L2944
	inx
L2944:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) fire_array+32,16,NAMETABLE_B+frm*64+64+PLASMA16_POS_X + PLASMA16_POS_Y*32);
;
	jsr     decsp3
	lda     #<(_fire_array+32)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_fire_array+32)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _frm
	jsr     shlax4
	jsr     shlax2
	pha
	txa
	clc
	adc     #$24
	tax
	pla
	clc
	adc     #$40
	bcc     L2F60
	inx
	clc
L2F60:	adc     #$08
	bcc     L2F61
	inx
	clc
L2F61:	adc     #$80
	bcc     L294B
	inx
L294B:	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; scroll(256,0);
;
	ldx     #$01
	lda     #$00
	jsr     pushax
	dex
	jsr     _scroll
;
; } else {
;
	jmp     L2930
;
; fxPlasm16Frame(frm);
;
L2F67:	lda     _frm
	ldx     #$00
	jsr     _fxPlasm16Frame
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz((unsigned char*) fire_array+0,16,NAMETABLE_A+frm*64+32+PLASMA16_POS_X + PLASMA16_POS_Y*32);
;
	jsr     decsp3
	lda     #<(_fire_array)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_fire_array)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _frm
	jsr     shlax4
	jsr     shlax2
	pha
	txa
	clc
	adc     #$20
	tax
	pla
	clc
	adc     #$20
	bcc     L2F62
	inx
	clc
L2F62:	adc     #$08
	bcc     L2F63
	inx
	clc
L2F63:	adc     #$80
	bcc     L295A
	inx
L295A:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) fire_array+32,16,NAMETABLE_A+frm*64+64+PLASMA16_POS_X + PLASMA16_POS_Y*32);
;
	jsr     decsp3
	lda     #<(_fire_array+32)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_fire_array+32)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _frm
	jsr     shlax4
	jsr     shlax2
	pha
	txa
	clc
	adc     #$20
	tax
	pla
	clc
	adc     #$40
	bcc     L2F64
	inx
	clc
L2F64:	adc     #$08
	bcc     L2F65
	inx
	clc
L2F65:	adc     #$80
	bcc     L2961
	inx
L2961:	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (frm = 0; frm < 8; frm++) {
;
L2930:	inc     _frm
	jmp     L2F66
;
; xa+=1;
;
L2F68:	inc     _xa
;
; ya+=1;
;
	inc     _ya
;
; xya-=1;
;
	dec     _xya
;
; colorAdd += 1;
;
	inc     _colorAdd
;
; scrSwap ^= 1;
;
	lda     _scrSwap
	eor     #$01
	sta     _scrSwap
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ plotfirehead (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_plotfirehead: near

.segment	"CODE"

;
; for(fx=0;fx<16;++fx){
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
L2F6A:	sta     (sp),y
	cmp     #$10
	bcs     L2F71
;
; rn=rand8();
;
	jsr     _rand8
	ldy     #$00
	sta     (sp),y
;
; if (rn>127) 
;
	cmp     #$80
	bcc     L2978
;
; fire_array[14*16+fx]=0x70+14;
;
	iny
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$E0
	bcc     L2F6D
	inx
	clc
L2F6D:	adc     #<(_fire_array)
	sta     ptr1
	txa
	adc     #>(_fire_array)
	sta     ptr1+1
	lda     #$7E
;
; else
;
	jmp     L2F72
;
; fire_array[14*16+fx]=0x70+13;
;
L2978:	iny
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$E0
	bcc     L2F6E
	inx
	clc
L2F6E:	adc     #<(_fire_array)
	sta     ptr1
	txa
	adc     #>(_fire_array)
	sta     ptr1+1
	lda     #$7D
L2F72:	dey
	sta     (ptr1),y
;
; for(fx=0;fx<16;++fx){
;
	iny
	clc
	tya
	adc     (sp),y
	jmp     L2F6A
;
; for(fx=0;fx<16;++fx){
;
L2F71:	lda     #$00
L2F6C:	sta     (sp),y
	cmp     #$10
	bcs     L2984
;
; rn=rand8();
;
	jsr     _rand8
	ldy     #$00
	sta     (sp),y
;
; if (rn>127) 
;
	cmp     #$80
	bcc     L298D
;
; fire_array[15*16+fx]=0x70+15;
;
	iny
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$F0
	bcc     L2F6F
	inx
	clc
L2F6F:	adc     #<(_fire_array)
	sta     ptr1
	txa
	adc     #>(_fire_array)
	sta     ptr1+1
	lda     #$7F
;
; else
;
	jmp     L2F73
;
; fire_array[15*16+fx]=0x70+14;
;
L298D:	iny
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$F0
	bcc     L2F70
	inx
	clc
L2F70:	adc     #<(_fire_array)
	sta     ptr1
	txa
	adc     #>(_fire_array)
	sta     ptr1+1
	lda     #$7E
L2F73:	dey
	sta     (ptr1),y
;
; for(fx=0;fx<16;++fx){
;
	iny
	clc
	tya
	adc     (sp),y
	jmp     L2F6C
;
; }
;
L2984:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fireloop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fireloop: near

.segment	"CODE"

;
; for(fx=0;fx<240;++fx){
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
L2F76:	sta     (sp),y
	cmp     #$F0
	bcs     L299A
;
; px=fire_array[fx];
;
	lda     (sp),y
	tay
	lda     _fire_array,y
	ldy     #$00
	sta     (sp),y
;
; if (px==fire_array[fx+16])
;
	ldx     #$00
	lda     (sp),y
	sta     sreg
	stx     sreg+1
	iny
	lda     (sp),y
	clc
	adc     #$10
	bcc     L29A8
	inx
L29A8:	sta     ptr1
	txa
	clc
	adc     #>(_fire_array)
	sta     ptr1+1
	ldy     #<(_fire_array)
	ldx     #$00
	lda     (ptr1),y
	cpx     sreg+1
	bne     L29A5
	cmp     sreg
	bne     L29A5
;
; px=0x70;
;
	lda     #$70
	ldy     #$00
;
; else{   
;
	jmp     L2F75
;
; px-=0x70;
;
L29A5:	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$70
	sta     (sp),y
;
; px+=fire_array[fx+16]-0x70;
;
	iny
	lda     (sp),y
	clc
	adc     #$10
	bcc     L29B1
	inx
L29B1:	sta     ptr1
	txa
	clc
	adc     #>(_fire_array)
	sta     ptr1+1
	ldy     #<(_fire_array)
	lda     (ptr1),y
	sec
	sbc     #$70
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
;
; px=(px>>1)+0x70;
;
	lsr     a
	clc
	adc     #$70
L2F75:	sta     (sp),y
;
; fire_array[fx]=px;
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _fire_array,x
;
; for(fx=0;fx<240;++fx){
;
	iny
	clc
	tya
	adc     (sp),y
	jmp     L2F76
;
; }
;
L299A:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fxFire (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxFire: near

.segment	"CODE"

;
; plotfirehead();
;
	jsr     _plotfirehead
;
; fireloop();
;
	jsr     _fireloop
;
; fireloop();
;
	jsr     _fireloop
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; for (fy=0;fy<4;++fy){
;
	lda     #$00
	sta     _fy
L2F77:	lda     _fy
	cmp     #$04
	bcs     L29C1
;
; multi_vram_buffer_horz((unsigned char*) fire_array+fy*16,16,NAMETABLE_A+5*32+8+fy*32);
;
	jsr     decsp3
	ldx     #$00
	lda     _fy
	jsr     shlax4
	clc
	adc     #<(_fire_array)
	tay
	txa
	adc     #>(_fire_array)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _fy
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$A8
	pha
	lda     tmp1
	adc     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; for (fy=0;fy<4;++fy){
;
	inc     _fy
	jmp     L2F77
;
; ppu_wait_nmi();
;
L29C1:	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; for (fy=4;fy<8;++fy){
;
	lda     #$04
	sta     _fy
L2F78:	lda     _fy
	cmp     #$08
	bcs     L29CF
;
; multi_vram_buffer_horz((unsigned char*) fire_array+fy*16,16,NAMETABLE_A+5*32+8+fy*32);
;
	jsr     decsp3
	ldx     #$00
	lda     _fy
	jsr     shlax4
	clc
	adc     #<(_fire_array)
	tay
	txa
	adc     #>(_fire_array)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _fy
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$A8
	pha
	lda     tmp1
	adc     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; for (fy=4;fy<8;++fy){
;
	inc     _fy
	jmp     L2F78
;
; ppu_wait_nmi();
;
L29CF:	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; for (fy=8;fy<12;++fy){
;
	lda     #$08
	sta     _fy
L2F79:	lda     _fy
	cmp     #$0C
	bcs     L29DD
;
; multi_vram_buffer_horz((unsigned char*) fire_array+fy*16,16,NAMETABLE_A+5*32+8+fy*32);
;
	jsr     decsp3
	ldx     #$00
	lda     _fy
	jsr     shlax4
	clc
	adc     #<(_fire_array)
	tay
	txa
	adc     #>(_fire_array)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _fy
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$A8
	pha
	lda     tmp1
	adc     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; for (fy=8;fy<12;++fy){
;
	inc     _fy
	jmp     L2F79
;
; ppu_wait_nmi();
;
L29DD:	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; for (fy=12;fy<16;++fy){
;
	lda     #$0C
	sta     _fy
L2F7A:	lda     _fy
	cmp     #$10
	bcs     L29EB
;
; multi_vram_buffer_horz((unsigned char*) fire_array+fy*16,16,NAMETABLE_A+5*32+8+fy*32);
;
	jsr     decsp3
	ldx     #$00
	lda     _fy
	jsr     shlax4
	clc
	adc     #<(_fire_array)
	tay
	txa
	adc     #>(_fire_array)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _fy
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$A8
	pha
	lda     tmp1
	adc     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; for (fy=12;fy<16;++fy){
;
	inc     _fy
	jmp     L2F7A
;
; ppu_wait_nmi();
;
L29EB:	jmp     _ppu_wait_nmi

.endproc

; ---------------------------------------------------------------
; void __near__ setup_scene_water (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_scene_water: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     decsp1
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024-24);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$E8
	jsr     _vram_fill
;
; attr=(3 << 6) | (3 << 4) | (0 << 2) | (0 << 0);
;
	lda     #$F0
	ldy     #$00
	sta     (sp),y
;
; vram_fill(attr,24);
;
	jsr     pusha
	ldx     #$00
	lda     #$18
	jsr     _vram_fill
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024-24);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$E8
	jsr     _vram_fill
;
; vram_fill(attr,24);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldx     #$00
	lda     #$18
	jsr     _vram_fill
;
; pal_bg(pal_water);
;
	lda     #<(_pal_water)
	ldx     #>(_pal_water)
	jsr     _pal_bg
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ setup_scene_fire (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_scene_fire: near

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,960);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,960);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; memfill((unsigned char*) fire_array, 0x70, 256);
;
	jsr     decsp3
	lda     #<(_fire_array)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_fire_array)
	sta     (sp),y
	lda     #$70
	ldy     #$00
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _memfill
;
; pal_col(1,0x06);
;
	lda     #$01
	jsr     pusha
	lda     #$06
	jsr     _pal_col
;
; pal_col(2,0x16);
;
	lda     #$02
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; pal_col(3,0x28);
;
	lda     #$03
	jsr     pusha
	lda     #$28
	jsr     _pal_col
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ setupRhombusFX (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupRhombusFX: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_BIG_FONT_RHOMBUS);
;
	lda     #$03
	jsr     _cnrom_set_bank
;
; chr_to_nametable(NAMETABLE_A, nam_rhombus);
;
	ldx     #$20
	lda     #$00
	jsr     pushax
	lda     #<(_nam_rhombus)
	ldx     #>(_nam_rhombus)
	jsr     _chr_to_nametable
;
; pal_col(1,0x01);
;
	lda     #$01
	jsr     pusha
	jsr     _pal_col
;
; pal_col(2,0x19);
;
	lda     #$02
	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; pal_col(3,0x28);
;
	lda     #$03
	jsr     pusha
	lda     #$28
	jsr     _pal_col
;
; pal_col(5,0x00);
;
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _pal_col
;
; pal_col(6,0x10);
;
	lda     #$06
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; pal_col(7,0x30);
;
	lda     #$07
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ setupGridFX (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupGridFX: near

.segment	"CODE"

;
; void setupGridFX(unsigned char color) {
;
	jsr     pusha
;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_SCROLLER_FX);
;
	lda     #$02
	jsr     _cnrom_set_bank
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_scroll_gridA);
;
	lda     #<(_nam_scroll_gridA)
	ldx     #>(_nam_scroll_gridA)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_scroll_gridB);
;
	lda     #<(_nam_scroll_gridB)
	ldx     #>(_nam_scroll_gridB)
	jsr     _vram_unrle
;
; pal_bg(pal_scrollerFX);
;
	lda     #<(_pal_scrollerFX)
	ldx     #>(_pal_scrollerFX)
	jsr     _pal_bg
;
; pal_spr(pal_scrollerFX);
;
	lda     #<(_pal_scrollerFX)
	ldx     #>(_pal_scrollerFX)
	jsr     _pal_spr
;
; pal_col(2,color);
;
	lda     #$02
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _pal_col
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ setupSquaresFX (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupSquaresFX: near

.segment	"CODE"

;
; void setupSquaresFX(unsigned char color) {
;
	jsr     pusha
;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_SCROLLER_FX);
;
	lda     #$02
	jsr     _cnrom_set_bank
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_scroll_squaresA);
;
	lda     #<(_nam_scroll_squaresA)
	ldx     #>(_nam_scroll_squaresA)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_scroll_squaresB);
;
	lda     #<(_nam_scroll_squaresB)
	ldx     #>(_nam_scroll_squaresB)
	jsr     _vram_unrle
;
; pal_bg(pal_scrollerFX);
;
	lda     #<(_pal_scrollerFX)
	ldx     #>(_pal_scrollerFX)
	jsr     _pal_bg
;
; pal_spr(pal_scrollerFX);
;
	lda     #<(_pal_scrollerFX)
	ldx     #>(_pal_scrollerFX)
	jsr     _pal_spr
;
; pal_col(2,color);
;
	lda     #$02
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _pal_col
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ setupInvadersFX (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupInvadersFX: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_CHUNKS_FONT_INVADERS);
;
	lda     #$01
	jsr     _cnrom_set_bank
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_InvadersA);
;
	lda     #<(_nam_InvadersA)
	ldx     #>(_nam_InvadersA)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_InvadersB);
;
	lda     #<(_nam_InvadersB)
	ldx     #>(_nam_InvadersB)
	jsr     _vram_unrle
;
; pal_bg(pal_scrollerFX);
;
	lda     #<(_pal_scrollerFX)
	ldx     #>(_pal_scrollerFX)
	jsr     _pal_bg
;
; pal_spr(pal_Platforms);
;
	lda     #<(_pal_Platforms)
	ldx     #>(_pal_Platforms)
	jsr     _pal_spr
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ fxSetupFinalScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxSetupFinalScreen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_BIG_FONT_RHOMBUS);
;
	lda     #$03
	jsr     _cnrom_set_bank
;
; chr_to_nametable(NAMETABLE_A, nam_qr_A);
;
	ldx     #$20
	lda     #$00
	jsr     pushax
	lda     #<(_nam_qr_A)
	ldx     #>(_nam_qr_A)
	jsr     _chr_to_nametable
;
; chr_to_nametable(NAMETABLE_B, nam_qr_B);
;
	ldx     #$24
	lda     #$00
	jsr     pushax
	lda     #<(_nam_qr_B)
	ldx     #>(_nam_qr_B)
	jsr     _chr_to_nametable
;
; cnrom_set_bank(TILESET_SCROLLER_FX);
;
	lda     #$02
	jsr     _cnrom_set_bank
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_bg(pal_part1);
;
	lda     #<(_pal_part1)
	ldx     #>(_pal_part1)
	jsr     _pal_bg
;
; pal_col(1,0x0f);
;
	lda     #$01
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(2,0x0f);
;
	lda     #$02
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(3,0x0f);
;
	lda     #$03
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(5,0x0f);
;
	lda     #$05
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(6,0x0f);
;
	lda     #$06
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(7,0x0f);
;
	lda     #$07
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ fxPaletteRoll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxPaletteRoll: near

.segment	"CODE"

;
; switch(palRoll) {
;
	lda     _palRoll
;
; }
;
	beq     L2AAE
	cmp     #$01
	beq     L2F7C
	cmp     #$02
	beq     L2AC4
	jmp     L2F7D
;
; pal_col(1,0x01);
;
L2AAE:	lda     #$01
	jsr     pusha
	jsr     _pal_col
;
; pal_col(2,0x19);
;
	lda     #$02
	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; pal_col(3,0x28);
;
	lda     #$03
	jsr     pusha
	lda     #$28
;
; break;
;
	jmp     L2F7B
;
; pal_col(1,0x19);
;
L2F7C:	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; pal_col(2,0x28);
;
	lda     #$02
	jsr     pusha
	lda     #$28
	jsr     _pal_col
;
; pal_col(3,0x01);
;
	lda     #$03
	jsr     pusha
	lda     #$01
;
; break;
;
	jmp     L2F7B
;
; pal_col(1,0x28);
;
L2AC4:	lda     #$01
	jsr     pusha
	lda     #$28
	jsr     _pal_col
;
; pal_col(2,0x01);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _pal_col
;
; pal_col(3,0x19);
;
	lda     #$03
	jsr     pusha
	lda     #$19
L2F7B:	jsr     _pal_col
;
; ++palRoll;
;
L2F7D:	inc     _palRoll
;
; if (palRoll>2) palRoll=0;
;
	lda     _palRoll
	cmp     #$03
	bcc     L2ACF
	lda     #$00
	sta     _palRoll
;
; }
;
L2ACF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fxScroll32 (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxScroll32: near

.segment	"CODE"

;
; void fxScroll32(unsigned char* restore_array) {
;
	jsr     pushax
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; if (from_x>5 && from_x<14){
;
	lda     _from_x
	cmp     #$06
	bcc     L2F97
	cmp     #$0E
	bcs     L2F97
;
; imsb=(from_x-6)<<2;
;
	sec
	sbc     #$06
	asl     a
	asl     a
	sta     _imsb
;
; scrollPage=NAMETABLE_B;
;
	ldx     #$24
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; if (from_x<6){
;
L2F97:	lda     _from_x
	cmp     #$06
	bcs     L2F98
;
; imsb=8+(from_x<<2);
;
	asl     a
	asl     a
	clc
	adc     #$08
	sta     _imsb
;
; scrollPage=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; if (from_x>13){
;
L2F98:	lda     _from_x
	cmp     #$0E
	bcc     L2F99
;
; imsb=(from_x-14)<<2;
;
	sec
	sbc     #$0E
	asl     a
	asl     a
	sta     _imsb
;
; scrollPage=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; scrollRow=from_x<<2;
;
L2F99:	lda     _from_x
	asl     a
	asl     a
	sta     _scrollRow
;
; multi_vram_buffer_horz((unsigned char*) restore_array + scrollRow, 4, scrollPage+32*8+(imsb));
;
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _scrollRow
	bcc     L2F7E
	inx
L2F7E:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	inx
	clc
	adc     _imsb
	bcc     L2F7F
	inx
L2F7F:	jsr     _multi_vram_buffer_horz
;
; scrollRow+=64;
;
	lda     #$40
	clc
	adc     _scrollRow
	sta     _scrollRow
;
; multi_vram_buffer_horz((unsigned char*) restore_array + scrollRow, 4, scrollPage+32*9+(imsb));
;
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _scrollRow
	bcc     L2F80
	inx
L2F80:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$20
	bcc     L2AFC
	inx
L2AFC:	inx
	clc
	adc     _imsb
	bcc     L2F81
	inx
L2F81:	jsr     _multi_vram_buffer_horz
;
; scrollRow+=64;
;
	lda     #$40
	clc
	adc     _scrollRow
	sta     _scrollRow
;
; multi_vram_buffer_horz((unsigned char*) restore_array + scrollRow, 4, scrollPage+32*10+(imsb));
;
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _scrollRow
	bcc     L2F82
	inx
L2F82:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$40
	bcc     L2B04
	inx
L2B04:	inx
	clc
	adc     _imsb
	bcc     L2F83
	inx
L2F83:	jsr     _multi_vram_buffer_horz
;
; scrollRow+=64;
;
	lda     #$40
	clc
	adc     _scrollRow
	sta     _scrollRow
;
; multi_vram_buffer_horz((unsigned char*) restore_array + scrollRow, 4, scrollPage+32*11+(imsb));
;
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _scrollRow
	bcc     L2F84
	inx
L2F84:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$60
	bcc     L2B0C
	inx
L2B0C:	inx
	clc
	adc     _imsb
	bcc     L2F85
	inx
L2F85:	jsr     _multi_vram_buffer_horz
;
; if (from_x>4 && from_x<13){
;
	lda     _from_x
	cmp     #$05
	bcc     L2F9D
	cmp     #$0D
	bcs     L2F9D
;
; imsb=(from_x-5)<<2;
;
	sec
	sbc     #$05
	asl     a
	asl     a
	sta     _imsb
;
; scrollPage=NAMETABLE_B;
;
	ldx     #$24
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; if (from_x<5){
;
L2F9D:	lda     _from_x
	cmp     #$05
	bcs     L2F9E
;
; imsb=12+(from_x<<2);
;
	asl     a
	asl     a
	clc
	adc     #$0C
	sta     _imsb
;
; scrollPage=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; if (from_x>12){
;
L2F9E:	lda     _from_x
	cmp     #$0D
	lda     #$00
	bcc     L2FA0
;
; imsb=(from_x-13)<<2;
;
	lda     _from_x
	sec
	sbc     #$0D
	asl     a
	asl     a
	sta     _imsb
;
; scrollPage=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; scrollRow=0;
;
L2FA0:	sta     _scrollRow
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom1_BG + scrollRow, 4, scrollPage+32*8+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom1_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom1_BG)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	inx
	clc
	adc     _imsb
	bcc     L2F86
	inx
L2F86:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom1_BG + scrollRow+4, 4, scrollPage+32*9+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom1_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom1_BG)
	tax
	tya
	clc
	adc     #$04
	bcc     L2B31
	inx
L2B31:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$20
	bcc     L2B34
	inx
L2B34:	inx
	clc
	adc     _imsb
	bcc     L2F87
	inx
L2F87:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom1_BG + scrollRow+8, 4, scrollPage+32*10+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom1_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom1_BG)
	tax
	tya
	clc
	adc     #$08
	bcc     L2B38
	inx
L2B38:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$40
	bcc     L2B3B
	inx
L2B3B:	inx
	clc
	adc     _imsb
	bcc     L2F88
	inx
L2F88:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom1_BG + scrollRow+12, 4, scrollPage+32*11+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom1_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom1_BG)
	tax
	tya
	clc
	adc     #$0C
	bcc     L2B3F
	inx
L2B3F:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$60
	bcc     L2B42
	inx
L2B42:	inx
	clc
	adc     _imsb
	bcc     L2F89
	inx
L2F89:	jsr     _multi_vram_buffer_horz
;
; if (from_x>3 && from_x<12){
;
	lda     _from_x
	cmp     #$04
	bcc     L2FA4
	cmp     #$0C
	bcs     L2FA4
;
; imsb=(from_x-4)<<2;
;
	sec
	sbc     #$04
	asl     a
	asl     a
	sta     _imsb
;
; scrollPage=NAMETABLE_B;
;
	ldx     #$24
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; if (from_x<4){
;
L2FA4:	lda     _from_x
	cmp     #$04
	bcs     L2FA5
;
; imsb=16+(from_x<<2);
;
	asl     a
	asl     a
	clc
	adc     #$10
	sta     _imsb
;
; scrollPage=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; if (from_x>11){
;
L2FA5:	lda     _from_x
	cmp     #$0C
	lda     #$00
	bcc     L2FA7
;
; imsb=(from_x-12)<<2;
;
	lda     _from_x
	sec
	sbc     #$0C
	asl     a
	asl     a
	sta     _imsb
;
; scrollPage=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _scrollPage
	stx     _scrollPage+1
;
; scrollRow=0;
;
L2FA7:	sta     _scrollRow
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom2_BG + scrollRow, 4, scrollPage+32*8+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom2_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom2_BG)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	inx
	clc
	adc     _imsb
	bcc     L2F8A
	inx
L2F8A:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom2_BG + scrollRow+4, 4, scrollPage+32*9+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom2_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom2_BG)
	tax
	tya
	clc
	adc     #$04
	bcc     L2B67
	inx
L2B67:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$20
	bcc     L2B6A
	inx
L2B6A:	inx
	clc
	adc     _imsb
	bcc     L2F8B
	inx
L2F8B:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom2_BG + scrollRow+8, 4, scrollPage+32*10+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom2_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom2_BG)
	tax
	tya
	clc
	adc     #$08
	bcc     L2B6E
	inx
L2B6E:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$40
	bcc     L2B71
	inx
L2B71:	inx
	clc
	adc     _imsb
	bcc     L2F8C
	inx
L2F8C:	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char*) logo_bottom2_BG + scrollRow+12, 4, scrollPage+32*11+(imsb));
;
	jsr     decsp3
	lda     _scrollRow
	clc
	adc     #<(_logo_bottom2_BG)
	tay
	lda     #$00
	adc     #>(_logo_bottom2_BG)
	tax
	tya
	clc
	adc     #$0C
	bcc     L2B75
	inx
L2B75:	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	lda     _scrollPage
	ldx     _scrollPage+1
	clc
	adc     #$60
	bcc     L2B78
	inx
L2B78:	inx
	clc
	adc     _imsb
	bcc     L2F8D
	inx
L2F8D:	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(0,attr_tbl1[from_x]);
;
	lda     #$00
	jsr     pusha
	tax
	lda     _from_x
	asl     a
	bcc     L2F91
	inx
	clc
L2F91:	adc     #<(_attr_tbl1)
	sta     ptr1
	txa
	adc     #>(_attr_tbl1)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _one_vram_buffer
;
; one_vram_buffer((1 << 6) | (1 << 4) | (1 << 2) | (1 << 0),attr_tbl2[from_x]);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     _from_x
	asl     a
	bcc     L2F92
	inx
	clc
L2F92:	adc     #<(_attr_tbl2)
	sta     ptr1
	txa
	adc     #>(_attr_tbl2)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _one_vram_buffer
;
; one_vram_buffer((1 << 6) | (1 << 4) | (1 << 2) | (1 << 0),attr_tbl3[from_x]);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     _from_x
	asl     a
	bcc     L2F93
	inx
	clc
L2F93:	adc     #<(_attr_tbl3)
	sta     ptr1
	txa
	adc     #>(_attr_tbl3)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _one_vram_buffer
;
; scroll(sq_scroll_pos<<5, 0);
;
	ldx     #$00
	lda     _sq_scroll_pos
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     pushax
	ldx     #$00
	txa
	jsr     _scroll
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; spr=oam_meta_spr(12*8,12*8-1,spr,logo_bottom);
;
	jsr     decsp3
	lda     #$60
	ldy     #$02
	sta     (sp),y
	lda     #$5F
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_logo_bottom)
	ldx     #>(_logo_bottom)
	jsr     _oam_meta_spr
	sta     _spr
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if (!(fr&1)) {
;
	lda     _fr
	and     #$01
	bne     L2FA8
;
; ++sq_scroll_pos;
;
	inc     _sq_scroll_pos
;
; ++from_x;
;
	inc     _from_x
;
; ++fr;
;
L2FA8:	inc     _fr
;
; if (fr>29) {
;
	lda     _fr
	cmp     #$1E
	bcc     L2FA9
;
; fr=0;
;
	lda     #$00
	sta     _fr
;
; if (from_x>15) sq_scroll_pos=from_x=0;
;
L2FA9:	lda     _from_x
	cmp     #$10
	bcc     L2BA4
	lda     #$00
	sta     _from_x
	sta     _sq_scroll_pos
;
; };
;
L2BA4:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fxInvaders (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxInvaders: near

.segment	"CODE"

;
; scroll(sq_scroll_pos*96, 0);
;
	lda     _sq_scroll_pos
	jsr     pusha0
	lda     #$60
	jsr     tosumula0
	jsr     pushax
	ldx     #$00
	txa
	jsr     _scroll
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if (fr>23) {
;
	lda     _fr
	cmp     #$18
	bcc     L2FAA
;
; ++sq_scroll_pos;
;
	inc     _sq_scroll_pos
;
; ++from_x;
;
	inc     _from_x
;
; fr=0;
;
	lda     #$00
	sta     _fr
;
; ++fr;
;
L2FAA:	inc     _fr
;
; if (fr>29) {
;
	lda     _fr
	cmp     #$1E
	bcc     L2FAB
;
; fr=0;
;
	lda     #$00
	sta     _fr
;
; if (from_x>15) sq_scroll_pos=from_x=0;
;
L2FAB:	lda     _from_x
	cmp     #$10
	lda     #$00
	bcc     L2FAD
	sta     _from_x
	sta     _sq_scroll_pos
;
; spr=0; 
;
L2FAD:	sta     _spr
;
; showPlatforms();
;
	jsr     _showPlatforms
;
; oam_hide_rest(spr);
;
	lda     _spr
	jmp     _oam_hide_rest

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ findsym (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findsym: near

.segment	"CODE"

;
; unsigned char findsym(unsigned char substr){
;
	jsr     pusha
;
; unsigned char fs=0;
;
	lda     #$00
	jsr     pusha
;
; while(tbl_ascii[fs]!=substr) ++fs;
;
	jmp     L2BC7
L2BC5:	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L2BC7:	ldy     #$00
	lda     (sp),y
	tay
	ldx     #$00
	lda     _tbl_ascii,y
	ldy     #$01
	cmp     (sp),y
	bne     L2BC5
;
; return fs;
;
	lda     (sp,x)
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ setupBigTextPage (__near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupBigTextPage: near

.segment	"CODE"

;
; void setupBigTextPage(const unsigned char *page, unsigned char setattr) {
;
	jsr     pusha
;
; ppu_off();
;
	jsr     decsp7
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_BIG_FONT_RHOMBUS);
;
	lda     #$03
	jsr     _cnrom_set_bank
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(nam_BigText);
;
	lda     #<(_nam_BigText)
	ldx     #>(_nam_BigText)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0, 960);
;
	lda     #$00
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_adr(NAMETABLE_B+960);
;
	ldx     #$27
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill((1 << 6) | (1 << 4) | (1 << 2) | (1 << 0), 64);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     #$40
	jsr     _vram_fill
;
; pal_bg(pal_bigText);
;
	lda     #<(_pal_bigText)
	ldx     #>(_pal_bigText)
	jsr     _pal_bg
;
; pal_spr(pal_bigText);
;
	lda     #<(_pal_bigText)
	ldx     #>(_pal_bigText)
	jsr     _pal_spr
;
; for (y=0;y<9;++y) {
;
	lda     #$00
	ldy     #$05
L2FB1:	sta     (sp),y
	cmp     #$09
	jcs     L2BEA
;
; pos=NAMETABLE_B+3*32+1+(y*96);
;
	lda     (sp),y
	jsr     pusha0
	lda     #$60
	jsr     tosumula0
	clc
	adc     #$61
	pha
	txa
	adc     #$24
	tax
	pla
	ldy     #$02
	jsr     staxysp
;
; for (x=0;x<16;++x) {
;
	lda     #$00
	ldy     #$06
L2FB0:	sta     (sp),y
	cmp     #$10
	jcs     L2BEB
;
; sym=*page++;
;
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2BFE
	inx
L2BFE:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	ldy     #$04
	sta     (sp),y
;
; if (sym!=' ') {
;
	cmp     #$20
	jeq     L2BFF
;
; bigSymbol=tbl_alphabet[findsym(sym)];
;
	lda     (sp),y
	jsr     _findsym
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_tbl_alphabet)
	sta     ptr1
	lda     tmp1
	adc     #>(_tbl_alphabet)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
;
; vram_adr(pos);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; vram_write(bigSymbol, 2);
;
	jsr     pushw0sp
	ldx     #$00
	lda     #$02
	jsr     _vram_write
;
; vram_adr(pos+32);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$20
	bcc     L2C0C
	inx
L2C0C:	jsr     _vram_adr
;
; vram_write(bigSymbol+2, 2);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L2C0F
	inx
L2C0F:	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     _vram_write
;
; if (sym=='.' || sym==',' || sym=='-' || sym=='!' || sym==':' || sym=='"')
;
	ldy     #$04
	lda     (sp),y
	cmp     #$2E
	beq     L2BFF
	cmp     #$2C
	beq     L2BFF
	cmp     #$2D
	beq     L2BFF
	cmp     #$21
	beq     L2BFF
	cmp     #$3A
	beq     L2BFF
	cmp     #$22
;
; else
;
	beq     L2BFF
;
; pos+=2;
;
	ldy     #$02
	ldx     #$00
	tya
;
; else
;
	jmp     L2FAF
;
; pos+=1;
;
L2BFF:	ldy     #$02
	ldx     #$00
	lda     #$01
L2FAF:	jsr     addeqysp
;
; for (x=0;x<16;++x) {
;
	ldy     #$06
	clc
	lda     #$01
	adc     (sp),y
	jmp     L2FB0
;
; for (y=0;y<9;++y) {
;
L2BEB:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L2FB1
;
; if (setattr==1) {
;
L2BEA:	ldy     #$07
	lda     (sp),y
	cmp     #$01
	bne     L2FB4
;
; vram_adr(NAMETABLE_B+0x03c0);
;
	ldx     #$27
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill((2 << 6) | (2 << 4) | (2 << 2) | (2 << 0),8);
;
	lda     #$AA
	jsr     pusha
	ldx     #$00
	lda     #$08
	jsr     _vram_fill
;
; vram_fill((1 << 6) | (1 << 4) | (2 << 2) | (2 << 0),8);
;
	lda     #$5A
	jsr     pusha
	ldx     #$00
	lda     #$08
	jsr     _vram_fill
;
; if (setattr==2) {
;
	ldy     #$07
L2FB4:	lda     (sp),y
	cmp     #$02
	bne     L2FB6
;
; vram_adr(NAMETABLE_B+0x03c0);
;
	ldx     #$27
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill((2 << 6) | (2 << 4) | (2 << 2) | (2 << 0),8);
;
	lda     #$AA
	jsr     pusha
	ldx     #$00
	lda     #$08
	jsr     _vram_fill
;
; vram_fill((1 << 6) | (1 << 4) | (2 << 2) | (2 << 0),8);
;
	lda     #$5A
	jsr     pusha
	ldx     #$00
	lda     #$08
	jsr     _vram_fill
;
; if (setattr==3) {
;
	ldy     #$07
L2FB6:	lda     (sp),y
	cmp     #$03
	bne     L2FB7
;
; vram_adr(NAMETABLE_B+0x03e8);
;
	ldx     #$27
	lda     #$E8
	jsr     _vram_adr
;
; vram_fill((2 << 6) | (2 << 4) | (2 << 2) | (2 << 0),8);
;
	lda     #$AA
	jsr     pusha
	ldx     #$00
	lda     #$08
	jsr     _vram_fill
;
; scroll(0,0);
;
L2FB7:	jsr     push0
	jsr     _scroll
;
; oam_spr(0,8,0x8c,3,0);
;
	jsr     decsp4
	lda     #$00
	ldy     #$03
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$8C
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; bigTextX=0;
;
	lda     #$00
	sta     _bigTextX
;
; bigTextY=0;
;
	sta     _bigTextY
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; };
;
	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ fxBigPage (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fxBigPage: near

.segment	"CODE"

;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; ++gfrm;
;
	inc     _gfrm
	bne     L2C5E
	inc     _gfrm+1
;
; gfrm&=3;
;
L2C5E:	lda     _gfrm
	ldx     #$00
	and     #$03
	sta     _gfrm
	stx     _gfrm+1
;
; if (!gfrm) ++fx;
;
	lda     _gfrm
	ora     _gfrm+1
	bne     L2FC0
	inc     _fx
;
; fx&=1;
;
L2FC0:	lda     _fx
	and     #$01
	sta     _fx
;
; if (fx) {
;
	lda     _fx
	beq     L2C66
;
; pal_col(1,0x16);
;
	lda     #$01
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; pal_col(2,0x27);
;
	lda     #$02
;
; else
;
	jmp     L2FC5
;
; pal_col(2,0x16);
;
L2C66:	lda     #$02
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; pal_col(1,0x27);
;
	lda     #$01
L2FC5:	jsr     pusha
	lda     #$27
	jsr     _pal_col
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if (bigTextX<47){
;
	ldx     #$00
	lda     _bigTextX
	cmp     #$2F
	bcs     L2FC1
;
; split(sineTableAtoB[bigTextX],0);
;
	asl     a
	bcc     L2FBE
	inx
	clc
L2FBE:	adc     #<(_sineTableAtoB)
	sta     ptr1
	txa
	adc     #>(_sineTableAtoB)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
;
; else
;
	jmp     L2C80
;
; split(255-8+sineTableTextBobbling[bigTextY],0);
;
L2FC1:	lda     _bigTextY
	asl     a
	bcc     L2FBF
	inx
	clc
L2FBF:	adc     #<(_sineTableTextBobbling)
	sta     ptr1
	txa
	adc     #>(_sineTableTextBobbling)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$F7
	bcc     L2C80
	inx
L2C80:	jsr     pushax
	ldx     #$00
	txa
	jsr     _split
;
; if (bigTextX<47) ++bigTextX;
;
	lda     _bigTextX
	cmp     #$2F
	bcs     L2FC2
	inc     _bigTextX
;
; ++bigTextY;
;
L2FC2:	inc     _bigTextY
;
; if (bigTextY>31) bigTextY=0;
;
	lda     _bigTextY
	cmp     #$20
	bcc     L2C86
	lda     #$00
	sta     _bigTextY
;
; }
;
L2C86:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; sq_scroll_pos=0;
;
	lda     #$00
	sta     _sq_scroll_pos
;
; p=0;
;
	sta     _p
;
; muspos=musCheckpoint=0;
;
	sta     _musCheckpoint
	sta     _musCheckpoint+1
	sta     _muspos
	sta     _muspos+1
;
; setup_scene1();
;
	jsr     _setup_scene1
;
; music_play(0);
;
	lda     #$00
	jsr     _music_play
;
; scene1_ZXloading();
;
	jsr     _scene1_ZXloading
;
; xa = 0;
;
	lda     #$00
	sta     _xa
;
; ya = 0;
;
	sta     _ya
;
; setup_scene_water();
;
	jsr     _setup_scene_water
;
; pal_spr(pal_water);
;
	lda     #<(_pal_water)
	ldx     #>(_pal_water)
	jsr     _pal_spr
;
; to_bright=4;
;
	lda     #$04
	sta     _to_bright
;
; while (muspos < 1250+MUS_BAR) {
;
	jmp     L2CA3
;
; fxPlasm16(); // 8 frames
;
L2CA1:	jsr     _fxPlasm16
;
; if (muspos > 1250+160){
;
	lda     _muspos
	cmp     #$83
	lda     _muspos+1
	sbc     #$05
	bcc     L2FE2
;
; if (bright < 8) {
;
	lda     _bright
	cmp     #$08
	bcs     L2FF6
;
; else
;
	jmp     L2FFA
;
; if (bright!=to_bright)
;
L2FE2:	lda     _to_bright
	cmp     _bright
	beq     L2CAF
;
; ++bright;
;
L2FFA:	inc     _bright
;
; pal_bright(bright);
;
L2FF6:	lda     _bright
	jsr     _pal_bright
;
; muspos = get_mus_pos();
;
L2CAF:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 1250+MUS_BAR) {
;
L2CA3:	lda     _muspos+1
	cmp     #$05
	bne     L2CA5
	lda     _muspos
	cmp     #$A2
L2CA5:	bcc     L2CA1
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz((unsigned char *) string_we_like_to, 32, NAMETABLE_A+32 * 23);
;
	jsr     decsp3
	lda     #<(_string_we_like_to)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_string_we_like_to)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$E0
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char *) string_we_like_to, 32, NAMETABLE_B+32 * 23);
;
	jsr     decsp3
	lda     #<(_string_we_like_to)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_string_we_like_to)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	ldx     #$26
	lda     #$E0
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while (muspos < 1250+MUS_BAR*2) {
;
	jmp     L2CC2
;
; fxPlasm16(); 
;
L2CC0:	jsr     _fxPlasm16
;
; if (muspos > 1250+MUS_BAR*2-32){
;
	lda     _muspos
	cmp     #$43
	lda     _muspos+1
	sbc     #$06
	bcc     L2FE3
;
; if (bright < 8) {
;
	lda     _bright
	cmp     #$08
	bcs     L2FF7
;
; ++bright;
;
	inc     _bright
;
; else
;
	jmp     L2FF7
;
; if(bright!=to_bright)
;
L2FE3:	lda     _to_bright
	cmp     _bright
	beq     L2CCE
;
; --bright;
;
	dec     _bright
;
; pal_bright(bright);
;
L2FF7:	lda     _bright
	jsr     _pal_bright
;
; muspos = get_mus_pos();
;
L2CCE:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 1250+MUS_BAR*2) {
;
L2CC2:	lda     _muspos+1
	cmp     #$06
	bne     L2CC4
	lda     _muspos
	cmp     #$62
L2CC4:	bcc     L2CC0
;
; ppu_off();
;
	jsr     _ppu_off
;
; setup_scene_fire();
;
	jsr     _setup_scene_fire
;
; to_bright=4;
;
	lda     #$04
	sta     _to_bright
;
; while (muspos < 1250+MUS_BAR*3) {
;
	jmp     L2CDB
;
; fxFire(); 
;
L2CD9:	jsr     _fxFire
;
; if (muspos > 1250+MUS_BAR*3-32){
;
	lda     _muspos
	cmp     #$03
	lda     _muspos+1
	sbc     #$07
	bcc     L2FE4
;
; if (bright < 8) {
;
	lda     _bright
	cmp     #$08
	bcs     L2FF8
;
; ++bright;
;
	inc     _bright
;
; else
;
	jmp     L2FF8
;
; if(bright!=to_bright)
;
L2FE4:	lda     _to_bright
	cmp     _bright
	beq     L2CE7
;
; --bright;
;
	dec     _bright
;
; pal_bright(bright);
;
L2FF8:	lda     _bright
	jsr     _pal_bright
;
; muspos = get_mus_pos();
;
L2CE7:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 1250+MUS_BAR*3) {
;
L2CDB:	lda     _muspos+1
	cmp     #$07
	bne     L2CDD
	lda     _muspos
	cmp     #$22
L2CDD:	bcc     L2CD9
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz((unsigned char *) string_invite_you_to, 32, NAMETABLE_A+32 * 23);
;
	jsr     decsp3
	lda     #<(_string_invite_you_to)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_string_invite_you_to)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$E0
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz((unsigned char *) string_invite_you_to, 32, NAMETABLE_B+32 * 23);
;
	jsr     decsp3
	lda     #<(_string_invite_you_to)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_string_invite_you_to)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	ldx     #$26
	lda     #$E0
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while (muspos < 1250+MUS_PATTERN+32) {
;
	jmp     L2CFA
;
; fxFire(); 
;
L2CF8:	jsr     _fxFire
;
; if (muspos > 1250+MUS_PATTERN){
;
	lda     _muspos
	cmp     #$E3
	lda     _muspos+1
	sbc     #$07
	bcc     L2FE5
;
; if (bright > 0) {
;
	lda     _bright
	beq     L2FF9
;
; else
;
	jmp     L2FFB
;
; if(bright!=to_bright)
;
L2FE5:	lda     _to_bright
	cmp     _bright
	beq     L2D06
;
; --bright;
;
L2FFB:	dec     _bright
;
; pal_bright(bright);
;
L2FF9:	lda     _bright
	jsr     _pal_bright
;
; muspos = get_mus_pos();
;
L2D06:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < 1250+MUS_PATTERN+32) {
;
L2CFA:	lda     _muspos+1
	cmp     #$08
	bne     L2CFC
	lda     _muspos
	cmp     #$02
L2CFC:	bcc     L2CF8
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while(muspos < 0x0814) {
;
	jmp     L2D11
;
; muspos = get_mus_pos();
;
L2D0F:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < 0x0814) {
;
L2D11:	lda     _muspos+1
	cmp     #$08
	bne     L2D13
	lda     _muspos
	cmp     #$14
L2D13:	bcc     L2D0F
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; setupSquaresFX(0x03);
;
	lda     #$03
	jsr     _setupSquaresFX
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; while(muspos < (0x0814 + MUS_BAR*3)){
;
	jmp     L2D1F
;
; fxScroll32((unsigned char*) restoreBGscrollSquares);
;
L2D1D:	lda     #<(_restoreBGscrollSquares)
	ldx     #>(_restoreBGscrollSquares)
	jsr     _fxScroll32
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (0x0814 + MUS_BAR*3)){
;
L2D1F:	lda     _muspos+1
	cmp     #$0A
	bne     L2D22
	lda     _muspos
	cmp     #$54
L2D22:	bcc     L2D1D
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; gfrm=255;
;
	ldx     #$00
	lda     #$FF
	sta     _gfrm
	stx     _gfrm+1
;
; setupBigTextPage(*infoPage1, 1);
;
	lda     #<(_infoPage1)
	ldx     #>(_infoPage1)
	jsr     pushax
	lda     #$01
	jsr     _setupBigTextPage
;
; gfrm=0;
;
	lda     #$00
	sta     _gfrm
	sta     _gfrm+1
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while(muspos < (0x0814 + MUS_BAR*3+MUS_BAR*5)){
;
	jmp     L2D37
;
; fxBigPage();
;
L2D35:	jsr     _fxBigPage
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (0x0814 + MUS_BAR*3+MUS_BAR*5)){
;
L2D37:	lda     _muspos+1
	cmp     #$0E
	bne     L2D3A
	lda     _muspos
	cmp     #$14
L2D3A:	bcc     L2D35
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; setupSquaresFX(0x04);
;
	lda     #$04
	jsr     _setupSquaresFX
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; while(muspos < (0x0814 + MUS_PATTERN*2 + MUS_PATTERN)){
;
	jmp     L2D46
;
; fxScroll32((unsigned char*) restoreBGscrollSquares);
;
L2D44:	lda     #<(_restoreBGscrollSquares)
	ldx     #>(_restoreBGscrollSquares)
	jsr     _fxScroll32
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (0x0814 + MUS_PATTERN*2 + MUS_PATTERN)){
;
L2D46:	lda     _muspos+1
	cmp     #$11
	bne     L2D49
	lda     _muspos
	cmp     #$14
L2D49:	bcc     L2D44
;
; musCheckpoint=muspos;
;
	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; fy=0;
;
	lda     #$00
	sta     _fy
;
; fx=0;
;
	sta     _fx
;
; setupRhombusFX();
;
	jsr     _setupRhombusFX
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
	jmp     L2D5A
;
; if (!(gfrm&3)) fxPaletteRoll();
;
L2D58:	lda     _gfrm
	and     #$03
	bne     L2D5D
	jsr     _fxPaletteRoll
;
; ++gfrm;
;
L2D5D:	inc     _gfrm
	bne     L2D62
	inc     _gfrm+1
;
; if (muspos == musCheckpoint || muspos == musCheckpoint+0x20*3 || muspos == musCheckpoint+0x20*3*2 || muspos == musCheckpoint+0x20*3*4 || muspos == musCheckpoint+0x20*3*5 || muspos == musCheckpoint+0x20*3*6)
;
L2D62:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	cpx     _muspos+1
	bne     L2FE9
	cmp     _muspos
	beq     L2D64
L2FE9:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$60
	bcc     L2D65
	inx
L2D65:	cpx     _muspos+1
	bne     L2FEA
	cmp     _muspos
	beq     L2D64
L2FEA:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$C0
	bcc     L2D66
	inx
L2D66:	cpx     _muspos+1
	bne     L2FEB
	cmp     _muspos
	beq     L2D64
L2FEB:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$80
	bcc     L2D67
	inx
L2D67:	inx
	cpx     _muspos+1
	bne     L2FEC
	cmp     _muspos
	beq     L2D64
L2FEC:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$E0
	bcc     L2D68
	inx
L2D68:	inx
	cpx     _muspos+1
	bne     L2FED
	cmp     _muspos
	beq     L2D64
L2FED:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$40
	bcc     L2D69
	inx
L2D69:	inx
	inx
	cpx     _muspos+1
	bne     L2D63
	cmp     _muspos
	bne     L2D63
;
; clear_vram_buffer();
;
L2D64:	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(features1+fy*64, 64, NAMETABLE_A+32*4+fy*128);
;
	jsr     decsp3
	ldx     #$00
	lda     _fy
	jsr     shlax4
	jsr     shlax2
	clc
	adc     #<(_features1)
	tay
	txa
	adc     #>(_features1)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$40
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _fy
	jsr     shlax4
	jsr     shlax3
	clc
	adc     #$80
	pha
	txa
	adc     #$20
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; ++fy;
;
	inc     _fy
;
; if (muspos == musCheckpoint+0x0f*3 || muspos == musCheckpoint+0x2f*3 || muspos == musCheckpoint+0x4f*3 || muspos == musCheckpoint+0x8f*3  || muspos == musCheckpoint+0x8f*3+96 || muspos == musCheckpoint+0x8f*3+(96*2))
;
L2D63:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$2D
	bcc     L2D73
	inx
L2D73:	cpx     _muspos+1
	bne     L2FEF
	cmp     _muspos
	beq     L2D72
L2FEF:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$8D
	bcc     L2D74
	inx
L2D74:	cpx     _muspos+1
	bne     L2FF0
	cmp     _muspos
	beq     L2D72
L2FF0:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$ED
	bcc     L2D75
	inx
L2D75:	cpx     _muspos+1
	bne     L2FF1
	cmp     _muspos
	beq     L2D72
L2FF1:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$AD
	bcc     L2D76
	inx
L2D76:	inx
	cpx     _muspos+1
	bne     L2FF2
	cmp     _muspos
	beq     L2D72
L2FF2:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$AD
	bcc     L2D77
	inx
L2D77:	inx
	clc
	adc     #$60
	bcc     L2D78
	inx
L2D78:	cpx     _muspos+1
	bne     L2FF3
	cmp     _muspos
	beq     L2D72
L2FF3:	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$AD
	bcc     L2D79
	inx
L2D79:	inx
	clc
	adc     #$C0
	bcc     L2D7B
	inx
L2D7B:	cpx     _muspos+1
	bne     L2D71
	cmp     _muspos
	bne     L2D71
;
; clear_vram_buffer();
;
L2D72:	jsr     _clear_vram_buffer
;
; multi_vram_buffer_horz(features_attrs+fx*8, 8, NAMETABLE_A+0x03c8+fx*8);
;
	jsr     decsp3
	ldx     #$00
	lda     _fx
	jsr     shlax3
	clc
	adc     #<(_features_attrs)
	tay
	txa
	adc     #>(_features_attrs)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _fx
	jsr     shlax3
	clc
	adc     #$C8
	pha
	txa
	adc     #$23
	tax
	pla
	jsr     _multi_vram_buffer_horz
;
; ++fx;
;
	inc     _fx
;
; ppu_wait_nmi();
;
L2D71:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
L2D5A:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	jsr     tosicmp
	jcc     L2D58
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ppu_off();
;
	jsr     _ppu_off
;
; setup_scene1();
;
	jsr     _setup_scene1
;
; pal_col(5,0x30);
;
	lda     #$05
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; pal_col(6,0x0f);
;
	lda     #$06
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(7,0x06);
;
	lda     #$07
	jsr     pusha
	lda     #$06
	jsr     _pal_col
;
; pal_col(9,0x0f);
;
	lda     #$09
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(10,0x0f);
;
	lda     #$0A
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; zx_loading(musCheckpoint + MUS_PATTERN+76, 0x2c, 0x05, 4, 0);
;
	jsr     decsp5
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	clc
	adc     #$4C
	bcc     L2D9C
	inx
L2D9C:	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; musCheckpoint=muspos;
;
	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; setupGridFX(0x05);
;
	lda     #$05
	jsr     _setupGridFX
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; musCheckpoint=muspos;
;
	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
	jmp     L2DAE
;
; fxScroll32((unsigned char*) restoreBGscrollGrid);
;
L2DAC:	lda     #<(_restoreBGscrollGrid)
	ldx     #>(_restoreBGscrollGrid)
	jsr     _fxScroll32
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
L2DAE:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	jsr     tosicmp
	bcc     L2DAC
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; setupBigTextPage(*infoPage2, 2);
;
	lda     #<(_infoPage2)
	ldx     #>(_infoPage2)
	jsr     pushax
	lda     #$02
	jsr     _setupBigTextPage
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while(muspos < (musCheckpoint + MUS_PATTERN + MUS_PATTERN)){
;
	jmp     L2DC4
;
; fxBigPage();
;
L2DC2:	jsr     _fxBigPage
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN + MUS_PATTERN)){
;
L2DC4:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	inx
	inx
	inx
	jsr     tosicmp
	bcc     L2DC2
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; setupGridFX(0x25);
;
	lda     #$25
	jsr     _setupGridFX
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; while(muspos < (musCheckpoint + MUS_PATTERN + MUS_PATTERN + MUS_PATTERN)){
;
	jmp     L2DD2
;
; fxScroll32((unsigned char*) restoreBGscrollGrid);
;
L2DD0:	lda     #<(_restoreBGscrollGrid)
	ldx     #>(_restoreBGscrollGrid)
	jsr     _fxScroll32
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN + MUS_PATTERN + MUS_PATTERN)){
;
L2DD2:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	inx
	inx
	inx
	inx
	inx
	inx
	jsr     tosicmp
	bcc     L2DD0
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; setupInvadersFX();
;
	jsr     _setupInvadersFX
;
; fr=0;
;
	lda     #$00
	sta     _fr
;
; for (p=0;p<8;++p) {
;
	sta     _p
L2FE6:	lda     _p
	cmp     #$08
	jcs     L2DE1
;
; musCheckpoint=muspos;
;
	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; platforms[(p&3)*5]=p+1;
;
	lda     _p
	ldx     #$00
	and     #$03
	jsr     mulax5
	clc
	adc     #<(_platforms)
	sta     ptr1
	txa
	adc     #>(_platforms)
	sta     ptr1+1
	lda     _p
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; while(muspos < musCheckpoint+MUS_HALF_BAR){
;
	jmp     L2DF7
;
; fxInvaders();
;
L2DEF:	jsr     _fxInvaders
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; if (p==3 && muspos==musCheckpoint+MUS_HALF_BAR-24) {
;
	lda     _p
	cmp     #$03
	bne     L2DF7
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$60
	bcc     L2DFA
	inx
L2DFA:	sec
	sbc     #$18
	bcs     L2DFB
	dex
L2DFB:	cpx     _muspos+1
	bne     L2DF7
	cmp     _muspos
	bne     L2DF7
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; oam_clear();
;
	jsr     _oam_clear
;
; platforms[0]=0;
;
	lda     #$00
	sta     _platforms
;
; platforms[5]=0;
;
	sta     _platforms+5
;
; platforms[10]=0;
;
	sta     _platforms+10
;
; platforms[15]=0;
;
	sta     _platforms+15
;
; while(muspos < musCheckpoint+MUS_HALF_BAR){
;
L2DF7:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$60
	bcc     L2DF3
	inx
L2DF3:	jsr     tosicmp
	bcc     L2DEF
;
; for (p=0;p<8;++p) {
;
	inc     _p
	jmp     L2FE6
;
; musCheckpoint=muspos;
;
L2DE1:	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; setupSquaresFX(0x0A);
;
	lda     #$0A
	jsr     _setupSquaresFX
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
	jmp     L2E16
;
; fxScroll32((unsigned char*) restoreBGscrollSquares);
;
L2E14:	lda     #<(_restoreBGscrollSquares)
	ldx     #>(_restoreBGscrollSquares)
	jsr     _fxScroll32
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
L2E16:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	jsr     tosicmp
	bcc     L2E14
;
; pal_bright(8);
;
	lda     #$08
	jsr     _pal_bright
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; setupBigTextPage(*infoPage3, 3);
;
	lda     #<(_infoPage3)
	ldx     #>(_infoPage3)
	jsr     pushax
	lda     #$03
	jsr     _setupBigTextPage
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while(muspos < (musCheckpoint + MUS_PATTERN + MUS_PATTERN)) {
;
	jmp     L2E2C
;
; fxBigPage();
;
L2E2A:	jsr     _fxBigPage
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN + MUS_PATTERN)) {
;
L2E2C:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	inx
	inx
	inx
	jsr     tosicmp
	bcc     L2E2A
;
; setupSquaresFX(0x0B);
;
	lda     #$0B
	jsr     _setupSquaresFX
;
; musCheckpoint=muspos;
;
	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; while(muspos < (musCheckpoint + 0x24*3)){
;
	jmp     L2E38
;
; fxScroll32((unsigned char*) restoreBGscrollSquares);
;
L2E36:	lda     #<(_restoreBGscrollSquares)
	ldx     #>(_restoreBGscrollSquares)
	jsr     _fxScroll32
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + 0x24*3)){
;
L2E38:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$6C
	bcc     L2E3B
	inx
L2E3B:	jsr     tosicmp
	bcc     L2E36
;
; while(muspos < (musCheckpoint + 0x36*3)){
;
	jmp     L2E42
;
; vram_adr(NAMETABLE_A);
;
L2E40:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_put(rand8());
;
	jsr     _rand8
	jsr     _vram_put
;
; scroll(rand8(), rand8()&7);
;
	jsr     _rand8
	jsr     pusha0
	jsr     _rand8
	ldx     #$00
	and     #$07
	jsr     _scroll
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + 0x36*3)){
;
L2E42:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$A2
	bcc     L2E45
	inx
L2E45:	jsr     tosicmp
	bcc     L2E40
;
; gfrm=0;
;
	lda     #$00
	sta     _gfrm
	sta     _gfrm+1
;
; while(muspos < (musCheckpoint + 0x36*3 + 0x08*3 - 18)){
;
	jmp     L2E54
;
; if (!(gfrm)&7)
;
L2E52:	lda     _gfrm
	ldx     _gfrm+1
	jsr     bnegax
	and     #$07
	beq     L2FE8
;
; ++p;
;
	inc     _p
;
; p&=3;
;
L2FE8:	lda     _p
	and     #$03
	sta     _p
;
; cnrom_set_bank(p);
;
	jsr     _cnrom_set_bank
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; ++gfrm;
;
	inc     _gfrm
	bne     L2E54
	inc     _gfrm+1
;
; while(muspos < (musCheckpoint + 0x36*3 + 0x08*3 - 18)){
;
L2E54:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$A2
	bcc     L2FDD
	inx
	clc
L2FDD:	adc     #$18
	bcc     L2E58
	inx
L2E58:	sec
	sbc     #$12
	bcs     L2E59
	dex
L2E59:	jsr     tosicmp
	bcc     L2E52
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_off();
;
	jsr     _ppu_off
;
; cnrom_set_bank(TILESET_BIG_FONT_RHOMBUS);
;
	lda     #$03
	jsr     _cnrom_set_bank
;
; chr_to_nametable(NAMETABLE_A, nam_Invites);
;
	ldx     #$20
	lda     #$00
	jsr     pushax
	lda     #<(_nam_Invites)
	ldx     #>(_nam_Invites)
	jsr     _chr_to_nametable
;
; cnrom_set_bank(TILESET_CHUNKS_FONT_INVADERS);
;
	lda     #$01
	jsr     _cnrom_set_bank
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_col(5,0x10);
;
	lda     #$05
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; while(muspos < (musCheckpoint + 0x36*3 + 0x10*3)){
;
	jmp     L2E7A
;
; cnrom_set_bank(rand8()&3);
;
L2E78:	jsr     _rand8
	and     #$03
	jsr     _cnrom_set_bank
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + 0x36*3 + 0x10*3)){
;
L2E7A:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$A2
	bcc     L2FDE
	inx
	clc
L2FDE:	adc     #$30
	bcc     L2E7E
	inx
L2E7E:	jsr     tosicmp
	bcc     L2E78
;
; pal_col(2,0x10);
;
	lda     #$02
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; cnrom_set_bank(TILESET_CHUNKS_FONT_INVADERS);
;
	lda     #$01
	jsr     _cnrom_set_bank
;
; while(muspos < (musCheckpoint + 0x36*3 + 0x1f*3 + 18)){
;
	jmp     L2E8B
;
; ppu_wait_nmi();
;
L2E89:	jsr     _ppu_wait_nmi
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + 0x36*3 + 0x1f*3 + 18)){
;
L2E8B:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$A2
	bcc     L2FDF
	inx
	clc
L2FDF:	adc     #$5D
	bcc     L2FE0
	inx
	clc
L2FE0:	adc     #$12
	bcc     L2E90
	inx
L2E90:	jsr     tosicmp
	bcc     L2E89
;
; pal_bright(8); ppu_wait_nmi();
;
	lda     #$08
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; fxPlasmSetup();
;
	jsr     _fxPlasmSetup
;
; pal_bright(4); ppu_wait_nmi();
;
	lda     #$04
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; musCheckpoint=muspos;
;
	lda     _muspos+1
	sta     _musCheckpoint+1
	lda     _muspos
	sta     _musCheckpoint
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
	jmp     L2E9F
;
; fxPlasm();
;
L2E9D:	jsr     _fxPlasm
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN)){
;
L2E9F:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	inx
	inx
	inx
	jsr     tosicmp
	bcc     L2E9D
;
; set_nmi_user_call_off();
;
	jsr     _set_nmi_user_call_off
;
; pal_bright(8); ppu_wait_nmi();
;
	lda     #$08
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; fxTwisterSetup();
;
	jsr     _fxTwisterSetup
;
; pal_bright(4); ppu_wait_nmi();
;
	lda     #$04
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; twTextTimer = get_mus_pos() + twTextDelay - 12;
;
	jsr     _get_mus_pos
	clc
	adc     #$C0
	bcc     L2EAF
	inx
L2EAF:	sec
	sbc     #$0C
	bcs     L2EB0
	dex
L2EB0:	sta     _twTextTimer
	stx     _twTextTimer+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN*2)){
;
	jmp     L2EB3
;
; fxTwister();
;
L2EB1:	jsr     _fxTwister
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN*2)){
;
L2EB3:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	pha
	lda     _musCheckpoint+1
	clc
	adc     #$06
	tax
	pla
	jsr     tosicmp
	bcc     L2EB1
;
; set_nmi_user_call_off();
;
	jsr     _set_nmi_user_call_off
;
; pal_bright(8); ppu_wait_nmi();
;
	lda     #$08
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; fxRotorSetup();
;
	jsr     _fxRotorSetup
;
; pal_bright(4); ppu_wait_nmi();
;
	lda     #$04
	jsr     _pal_bright
	jsr     _ppu_wait_nmi
;
; while(muspos < (musCheckpoint + MUS_PATTERN*3)){
;
	jmp     L2EC3
;
; fxRotor();
;
L2EC1:	jsr     _fxRotor
;
; muspos = get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < (musCheckpoint + MUS_PATTERN*3)){
;
L2EC3:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	pha
	lda     _musCheckpoint+1
	clc
	adc     #$09
	tax
	pla
	jsr     tosicmp
	bcc     L2EC1
;
; set_nmi_user_call_off();
;
	jsr     _set_nmi_user_call_off
;
; oam_clear(); 
;
	jsr     _oam_clear
;
; scroll(0,0); ppu_wait_nmi();
;
	jsr     push0
	jsr     _scroll
	jsr     _ppu_wait_nmi
;
; fxSetupFinalScreen();
;
	jsr     _fxSetupFinalScreen
;
; musCheckpoint=muspos=get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
	sta     _musCheckpoint
	stx     _musCheckpoint+1
;
; zx_loading(musCheckpoint+0x14*3, 0x00, 0x0f, 4, 0);
;
	jsr     decsp5
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$3C
	bcc     L2ED5
	inx
L2ED5:	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; zx_loading(musCheckpoint+0x18*3, 0x28, 0x01, 5, 256);
;
	jsr     decsp5
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$48
	bcc     L2EDC
	inx
L2EDC:	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; pal_col(5,0x30);
;
	lda     #$05
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; pal_col(6,0x02);
;
	lda     #$06
	jsr     pusha
	lda     #$02
	jsr     _pal_col
;
; pal_col(1,0x0f);
;
	lda     #$01
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(2,0x0f);
;
	lda     #$02
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; while(muspos < musCheckpoint+0x23*3) {
;
	jmp     L2EF0
;
; ppu_wait_nmi();
;
L2EEE:	jsr     _ppu_wait_nmi
;
; muspos=get_mus_pos();
;
	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while(muspos < musCheckpoint+0x23*3) {
;
L2EF0:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$69
	bcc     L2EF2
	inx
L2EF2:	jsr     tosicmp
	bcc     L2EEE
;
; zx_loading(musCheckpoint+0x34*3, 0x2c, 0x05, 4, 0);
;
	jsr     decsp5
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$9C
	bcc     L2EF8
	inx
L2EF8:	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	txa
	jsr     _zx_loading
;
; zx_loading(musCheckpoint+0x38*3, 0x28, 0x01, 5, 256);
;
	jsr     decsp5
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$A8
	bcc     L2EFF
	inx
L2EFF:	ldy     #$03
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$28
	ldy     #$02
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	ldx     #$01
	tya
	jsr     _zx_loading
;
; pal_col(7,0x10);
;
	lda     #$07
	jsr     pusha
	lda     #$10
	jsr     _pal_col
;
; zx_border(0x06);
;
	lda     #$06
	jsr     _zx_border
;
; while (muspos < musCheckpoint+0x38*3+25) {
;
	jmp     L2F0B
;
; muspos = get_mus_pos();
;
L2F09:	jsr     _get_mus_pos
	sta     _muspos
	stx     _muspos+1
;
; while (muspos < musCheckpoint+0x38*3+25) {
;
L2F0B:	lda     _muspos
	ldx     _muspos+1
	jsr     pushax
	lda     _musCheckpoint
	ldx     _musCheckpoint+1
	clc
	adc     #$A8
	bcc     L2FE1
	inx
	clc
L2FE1:	adc     #$19
	bcc     L2F0E
	inx
L2F0E:	jsr     tosicmp
	bcc     L2F09
;
; zx_border(0x0f);
;
	lda     #$0F
	jsr     _zx_border
;
; music_stop();
;
	jsr     _music_stop
;
; while(1) {};
;
L2FD8:	jmp     L2FD8

.endproc

